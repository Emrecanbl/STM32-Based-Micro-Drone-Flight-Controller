
Flight_Contoler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000735c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007470  08007470  00008470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f0  080074f0  00009078  2**0
                  CONTENTS
  4 .ARM          00000000  080074f0  080074f0  00009078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f0  080074f0  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f0  080074f0  000084f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f4  080074f4  000084f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080074f8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000078  08007570  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08007570  000094d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5a4  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002147  00000000  00000000  00018645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cad  00000000  00000000  0001b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017729  00000000  00000000  0001c465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d2b  00000000  00000000  00033b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cdf  00000000  00000000  000458b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  000cf5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007454 	.word	0x08007454

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007454 	.word	0x08007454

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2uiz>:
 80010c0:	0042      	lsls	r2, r0, #1
 80010c2:	d20e      	bcs.n	80010e2 <__aeabi_f2uiz+0x22>
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010c8:	d30b      	bcc.n	80010e2 <__aeabi_f2uiz+0x22>
 80010ca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d409      	bmi.n	80010e8 <__aeabi_f2uiz+0x28>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010dc:	fa23 f002 	lsr.w	r0, r3, r2
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr
 80010e8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010ec:	d101      	bne.n	80010f2 <__aeabi_f2uiz+0x32>
 80010ee:	0242      	lsls	r2, r0, #9
 80010f0:	d102      	bne.n	80010f8 <__aeabi_f2uiz+0x38>
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	4770      	bx	lr
 80010f8:	f04f 0000 	mov.w	r0, #0
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <MPU_6050_Init>:
extern I2C_HandleTypeDef hi2c1;
void MPU_6050_Who_am_I(){
	uint8_t Data[1];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_WHO_AM_I, 1, &Data, 1, 100);
}
void MPU_6050_Init(){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_I2C_ADRESS_AD0,MPU_REG_WHO_AM_I,1, &check, 1, 1000);
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2275      	movs	r2, #117	@ 0x75
 8001118:	21d0      	movs	r1, #208	@ 0xd0
 800111a:	4826      	ldr	r0, [pc, #152]	@ (80011b4 <MPU_6050_Init+0xb4>)
 800111c:	f003 fac2 	bl	80046a4 <HAL_I2C_Mem_Read>

	if (check == 0x68)  // Check Sensor
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b68      	cmp	r3, #104	@ 0x68
 8001124:	d141      	bne.n	80011aa <MPU_6050_Init+0xaa>
	{
		Data = 0;// Power-Up
 8001126:	2300      	movs	r3, #0
 8001128:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1, 1, &Data, 1, 100);
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	1dbb      	adds	r3, r7, #6
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	226b      	movs	r2, #107	@ 0x6b
 800113a:	21d0      	movs	r1, #208	@ 0xd0
 800113c:	481d      	ldr	r0, [pc, #116]	@ (80011b4 <MPU_6050_Init+0xb4>)
 800113e:	f003 f9b7 	bl	80044b0 <HAL_I2C_Mem_Write>
		Data = 0x07;// 1 kHZ
 8001142:	2307      	movs	r3, #7
 8001144:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_SMPLRT_DIV, 1, &Data, 1, 100);
 8001146:	2364      	movs	r3, #100	@ 0x64
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2219      	movs	r2, #25
 8001156:	21d0      	movs	r1, #208	@ 0xd0
 8001158:	4816      	ldr	r0, [pc, #88]	@ (80011b4 <MPU_6050_Init+0xb4>)
 800115a:	f003 f9a9 	bl	80044b0 <HAL_I2C_Mem_Write>
		Data=0;
 800115e:	2300      	movs	r3, #0
 8001160:	71bb      	strb	r3, [r7, #6]
		Data |= (3 << 3);// 2000 °/s
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	f043 0318 	orr.w	r3, r3, #24
 8001168:	b2db      	uxtb	r3, r3
 800116a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_GYRO_CONFIG, 1, &Data, 1, 100);
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	1dbb      	adds	r3, r7, #6
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	221b      	movs	r2, #27
 800117c:	21d0      	movs	r1, #208	@ 0xd0
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <MPU_6050_Init+0xb4>)
 8001180:	f003 f996 	bl	80044b0 <HAL_I2C_Mem_Write>
		Data=0;
 8001184:	2300      	movs	r3, #0
 8001186:	71bb      	strb	r3, [r7, #6]
		Data |= (3 << 3);// 16g
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	f043 0318 	orr.w	r3, r3, #24
 800118e:	b2db      	uxtb	r3, r3
 8001190:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_ACCEL_CONFIG, 1, &Data, 1, 100);
 8001192:	2364      	movs	r3, #100	@ 0x64
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	1dbb      	adds	r3, r7, #6
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	221c      	movs	r2, #28
 80011a2:	21d0      	movs	r1, #208	@ 0xd0
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <MPU_6050_Init+0xb4>)
 80011a6:	f003 f983 	bl	80044b0 <HAL_I2C_Mem_Write>
	}
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000208 	.word	0x20000208

080011b8 <MPU_6050_Temp_Read>:
int16_t MPU_6050_Temp_Read(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af04      	add	r7, sp, #16
	int8_t Data[2];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_ACCEL_TEMP_OUT_H, 1, Data, 2, 100);
 80011be:	2364      	movs	r3, #100	@ 0x64
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2302      	movs	r3, #2
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	2241      	movs	r2, #65	@ 0x41
 80011ce:	21d0      	movs	r1, #208	@ 0xd0
 80011d0:	4814      	ldr	r0, [pc, #80]	@ (8001224 <MPU_6050_Temp_Read+0x6c>)
 80011d2:	f003 fa67 	bl	80046a4 <HAL_I2C_Mem_Read>
	int16_t Temp =((Data[0] << 8)|Data[1]);
 80011d6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21b      	sxth	r3, r3
 80011de:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	80fb      	strh	r3, [r7, #6]
	Temp = (Temp/340) + 36.5;
 80011e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <MPU_6050_Temp_Read+0x70>)
 80011ec:	fb82 1203 	smull	r1, r2, r2, r3
 80011f0:	11d2      	asrs	r2, r2, #7
 80011f2:	17db      	asrs	r3, r3, #31
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f8fb 	bl	80003f4 <__aeabi_i2d>
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <MPU_6050_Temp_Read+0x74>)
 8001204:	f7fe ffaa 	bl	800015c <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fc0a 	bl	8000a28 <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]
	return Temp;
 8001218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000208 	.word	0x20000208
 8001228:	60606061 	.word	0x60606061
 800122c:	40424000 	.word	0x40424000

08001230 <MPU_6050_Accelerometer_Read>:

void MPU_6050_Accelerometer_Read(SensorData_t *SensorData){
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	int16_t RAW_ACCEL_XOUT = 0 ;
 8001238:	2300      	movs	r3, #0
 800123a:	82fb      	strh	r3, [r7, #22]
	int16_t RAW_ACCEL_YOUT = 0 ;
 800123c:	2300      	movs	r3, #0
 800123e:	82bb      	strh	r3, [r7, #20]
	int16_t RAW_ACCEL_ZOUT = 0 ;
 8001240:	2300      	movs	r3, #0
 8001242:	827b      	strh	r3, [r7, #18]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_ACCEL_XOUT_H, 1, Data, 6, 100);
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2306      	movs	r3, #6
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	223b      	movs	r2, #59	@ 0x3b
 8001256:	21d0      	movs	r1, #208	@ 0xd0
 8001258:	482a      	ldr	r0, [pc, #168]	@ (8001304 <MPU_6050_Accelerometer_Read+0xd4>)
 800125a:	f003 fa23 	bl	80046a4 <HAL_I2C_Mem_Read>

	RAW_ACCEL_XOUT = (int16_t)(Data[0]<<8)|(Data[1]);
 800125e:	7b3b      	ldrb	r3, [r7, #12]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	82fb      	strh	r3, [r7, #22]
	RAW_ACCEL_YOUT = (int16_t)(Data[2]<<8)|(Data[3]);
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	82bb      	strh	r3, [r7, #20]
	RAW_ACCEL_ZOUT = (int16_t)(Data[4]<<8)|(Data[5]);
 800127a:	7c3b      	ldrb	r3, [r7, #16]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7c7b      	ldrb	r3, [r7, #17]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	827b      	strh	r3, [r7, #18]

	SensorData->ACCEL_XOUT = RAW_ACCEL_XOUT/2048.0; //LSB Sensitivity
 8001288:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8b1 	bl	80003f4 <__aeabi_i2d>
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MPU_6050_Accelerometer_Read+0xd8>)
 8001298:	f7ff fa40 	bl	800071c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fbe8 	bl	8000a78 <__aeabi_d2f>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
	SensorData->ACCEL_YOUT = RAW_ACCEL_YOUT/2048.0;
 80012ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f89e 	bl	80003f4 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MPU_6050_Accelerometer_Read+0xd8>)
 80012be:	f7ff fa2d 	bl	800071c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fbd5 	bl	8000a78 <__aeabi_d2f>
 80012ce:	4602      	mov	r2, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
	SensorData->ACCEL_ZOUT = RAW_ACCEL_ZOUT/2048.0;
 80012d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f88b 	bl	80003f4 <__aeabi_i2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MPU_6050_Accelerometer_Read+0xd8>)
 80012e4:	f7ff fa1a 	bl	800071c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fbc2 	bl	8000a78 <__aeabi_d2f>
 80012f4:	4602      	mov	r2, r0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000208 	.word	0x20000208
 8001308:	40a00000 	.word	0x40a00000
 800130c:	00000000 	.word	0x00000000

08001310 <MPU_6050_Angle>:

void MPU_6050_Angle(SensorData_t *SensorData){
 8001310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001314:	b088      	sub	sp, #32
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	float x,y,z;
	x = SensorData->ACCEL_XOUT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	61fb      	str	r3, [r7, #28]
	y = SensorData->ACCEL_YOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	61bb      	str	r3, [r7, #24]
	z = SensorData->ACCEL_ZOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	617b      	str	r3, [r7, #20]
	float tanx,tany,tanz;
	tanx = x/(sqrt((z)*(z))+(y*y));
 800132c:	69f8      	ldr	r0, [r7, #28]
 800132e:	f7ff f873 	bl	8000418 <__aeabi_f2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	6979      	ldr	r1, [r7, #20]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff fcfb 	bl	8000d34 <__aeabi_fmul>
 800133e:	4603      	mov	r3, r0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f869 	bl	8000418 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f005 fdf3 	bl	8006f38 <sqrt>
 8001352:	4680      	mov	r8, r0
 8001354:	4689      	mov	r9, r1
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	69b8      	ldr	r0, [r7, #24]
 800135a:	f7ff fceb 	bl	8000d34 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f859 	bl	8000418 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4640      	mov	r0, r8
 800136c:	4649      	mov	r1, r9
 800136e:	f7fe fef5 	bl	800015c <__adddf3>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7ff f9cf 	bl	800071c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fb77 	bl	8000a78 <__aeabi_d2f>
 800138a:	4603      	mov	r3, r0
 800138c:	613b      	str	r3, [r7, #16]
	tany = y/(sqrt((x)*(x))+(z*z));
 800138e:	69b8      	ldr	r0, [r7, #24]
 8001390:	f7ff f842 	bl	8000418 <__aeabi_f2d>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	69f9      	ldr	r1, [r7, #28]
 800139a:	69f8      	ldr	r0, [r7, #28]
 800139c:	f7ff fcca 	bl	8000d34 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f838 	bl	8000418 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f005 fdc2 	bl	8006f38 <sqrt>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	6979      	ldr	r1, [r7, #20]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff fcba 	bl	8000d34 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f828 	bl	8000418 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4640      	mov	r0, r8
 80013ce:	4649      	mov	r1, r9
 80013d0:	f7fe fec4 	bl	800015c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f99e 	bl	800071c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb46 	bl	8000a78 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60fb      	str	r3, [r7, #12]
	tanz = z/(sqrt((y)*(y))+(x*x));
 80013f0:	6978      	ldr	r0, [r7, #20]
 80013f2:	f7ff f811 	bl	8000418 <__aeabi_f2d>
 80013f6:	4604      	mov	r4, r0
 80013f8:	460d      	mov	r5, r1
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	69b8      	ldr	r0, [r7, #24]
 80013fe:	f7ff fc99 	bl	8000d34 <__aeabi_fmul>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f807 	bl	8000418 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f005 fd91 	bl	8006f38 <sqrt>
 8001416:	4680      	mov	r8, r0
 8001418:	4689      	mov	r9, r1
 800141a:	69f9      	ldr	r1, [r7, #28]
 800141c:	69f8      	ldr	r0, [r7, #28]
 800141e:	f7ff fc89 	bl	8000d34 <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fff7 	bl	8000418 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4640      	mov	r0, r8
 8001430:	4649      	mov	r1, r9
 8001432:	f7fe fe93 	bl	800015c <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f96d 	bl	800071c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fb15 	bl	8000a78 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	60bb      	str	r3, [r7, #8]
	tanx = atan(tanx);
 8001452:	6938      	ldr	r0, [r7, #16]
 8001454:	f7fe ffe0 	bl	8000418 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f005 fd8e 	bl	8006f80 <atan>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fb04 	bl	8000a78 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	613b      	str	r3, [r7, #16]
	tany = atan(tany);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7fe ffcf 	bl	8000418 <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f005 fd7d 	bl	8006f80 <atan>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff faf3 	bl	8000a78 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]
	tanz = atan(tanz);
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7fe ffbe 	bl	8000418 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f005 fd6c 	bl	8006f80 <atan>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fae2 	bl	8000a78 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60bb      	str	r3, [r7, #8]
	SensorData->Angle_X = tanx*(1/(3.14/180.0));
 80014b8:	6938      	ldr	r0, [r7, #16]
 80014ba:	f7fe ffad 	bl	8000418 <__aeabi_f2d>
 80014be:	a31a      	add	r3, pc, #104	@ (adr r3, 8001528 <MPU_6050_Angle+0x218>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f800 	bl	80004c8 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fad2 	bl	8000a78 <__aeabi_d2f>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60da      	str	r2, [r3, #12]
	SensorData->Angle_Y = tany*(1/(3.14/180.0));
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7fe ff9c 	bl	8000418 <__aeabi_f2d>
 80014e0:	a311      	add	r3, pc, #68	@ (adr r3, 8001528 <MPU_6050_Angle+0x218>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7fe ffef 	bl	80004c8 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fac1 	bl	8000a78 <__aeabi_d2f>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
	SensorData->Angle_Z = tanz*(1/(3.14/180.0));
 80014fc:	68b8      	ldr	r0, [r7, #8]
 80014fe:	f7fe ff8b 	bl	8000418 <__aeabi_f2d>
 8001502:	a309      	add	r3, pc, #36	@ (adr r3, 8001528 <MPU_6050_Angle+0x218>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7fe ffde 	bl	80004c8 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fab0 	bl	8000a78 <__aeabi_d2f>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	615a      	str	r2, [r3, #20]
}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001528:	61d59ae7 	.word	0x61d59ae7
 800152c:	404ca994 	.word	0x404ca994

08001530 <MPU_6050_Gyroscope_Read>:

void MPU_6050_Gyroscope_Read(SensorData_t *SensorData){
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af04      	add	r7, sp, #16
 8001536:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	int16_t RAW_Gyro_XOUT = 0 ;
 8001538:	2300      	movs	r3, #0
 800153a:	82fb      	strh	r3, [r7, #22]
	int16_t RAW_Gyro_YOUT = 0 ;
 800153c:	2300      	movs	r3, #0
 800153e:	82bb      	strh	r3, [r7, #20]
	int16_t RAW_Gyro_ZOUT = 0 ;
 8001540:	2300      	movs	r3, #0
 8001542:	827b      	strh	r3, [r7, #18]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_GYRO_XOUT_H, 1, Data, 6, 100);
 8001544:	2364      	movs	r3, #100	@ 0x64
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2306      	movs	r3, #6
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2301      	movs	r3, #1
 8001554:	2243      	movs	r2, #67	@ 0x43
 8001556:	21d0      	movs	r1, #208	@ 0xd0
 8001558:	4843      	ldr	r0, [pc, #268]	@ (8001668 <MPU_6050_Gyroscope_Read+0x138>)
 800155a:	f003 f8a3 	bl	80046a4 <HAL_I2C_Mem_Read>

	RAW_Gyro_XOUT = (int16_t)(Data[0]<<8)|(Data[1]);
 800155e:	7b3b      	ldrb	r3, [r7, #12]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	7b7b      	ldrb	r3, [r7, #13]
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	82fb      	strh	r3, [r7, #22]
	RAW_Gyro_YOUT = (int16_t)(Data[2]<<8)|(Data[3]);
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	82bb      	strh	r3, [r7, #20]
	RAW_Gyro_ZOUT = (int16_t)(Data[4]<<8)|(Data[5]);
 800157a:	7c3b      	ldrb	r3, [r7, #16]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7c7b      	ldrb	r3, [r7, #17]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	827b      	strh	r3, [r7, #18]

	SensorData->GYRO_XOUT = RAW_Gyro_XOUT/16.4-(SensorData->x_cali); // LSB/°/s
 8001588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff31 	bl	80003f4 <__aeabi_i2d>
 8001592:	a333      	add	r3, pc, #204	@ (adr r3, 8001660 <MPU_6050_Gyroscope_Read+0x130>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f8c0 	bl	800071c <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4614      	mov	r4, r2
 80015a2:	461d      	mov	r5, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff35 	bl	8000418 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe fdcf 	bl	8000158 <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa59 	bl	8000a78 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
	SensorData->GYRO_YOUT = RAW_Gyro_YOUT/16.4-(SensorData->y_cali); //MPU_6050_Gyroscope_Cali outputs
 80015cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff0f 	bl	80003f4 <__aeabi_i2d>
 80015d6:	a322      	add	r3, pc, #136	@ (adr r3, 8001660 <MPU_6050_Gyroscope_Read+0x130>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f89e 	bl	800071c <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	461d      	mov	r5, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff13 	bl	8000418 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe fdad 	bl	8000158 <__aeabi_dsub>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fa37 	bl	8000a78 <__aeabi_d2f>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	605a      	str	r2, [r3, #4]
	SensorData->GYRO_ZOUT = RAW_Gyro_ZOUT/16.4-(SensorData->z_cali);
 8001610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe feed 	bl	80003f4 <__aeabi_i2d>
 800161a:	a311      	add	r3, pc, #68	@ (adr r3, 8001660 <MPU_6050_Gyroscope_Read+0x130>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f87c 	bl	800071c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fef1 	bl	8000418 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f7fe fd8b 	bl	8000158 <__aeabi_dsub>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa15 	bl	8000a78 <__aeabi_d2f>
 800164e:	4602      	mov	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]

}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bdb0      	pop	{r4, r5, r7, pc}
 800165c:	f3af 8000 	nop.w
 8001660:	66666666 	.word	0x66666666
 8001664:	40306666 	.word	0x40306666
 8001668:	20000208 	.word	0x20000208
 800166c:	00000000 	.word	0x00000000

08001670 <MPU_6050_Gyroscope_Cali>:

void MPU_6050_Gyroscope_Cali(SensorData_t *SensorData){
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af04      	add	r7, sp, #16
 8001676:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	int16_t RAW_Gyro_XOUT = 0 ;
 8001678:	2300      	movs	r3, #0
 800167a:	827b      	strh	r3, [r7, #18]
	int16_t RAW_Gyro_YOUT = 0 ;
 800167c:	2300      	movs	r3, #0
 800167e:	823b      	strh	r3, [r7, #16]
	int16_t RAW_Gyro_ZOUT = 0 ;
 8001680:	2300      	movs	r3, #0
 8001682:	81fb      	strh	r3, [r7, #14]
	SensorData->x_cali =0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
	SensorData->y_cali =0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
	SensorData->z_cali =0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
	for(int i =0 ;i<=1000;i++){
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e081      	b.n	80017a6 <MPU_6050_Gyroscope_Cali+0x136>
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADRESS_AD0, MPU_REG_GYRO_XOUT_H, 1, Data, 6, 100);
 80016a2:	2364      	movs	r3, #100	@ 0x64
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2306      	movs	r3, #6
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	2243      	movs	r2, #67	@ 0x43
 80016b4:	21d0      	movs	r1, #208	@ 0xd0
 80016b6:	4852      	ldr	r0, [pc, #328]	@ (8001800 <MPU_6050_Gyroscope_Cali+0x190>)
 80016b8:	f002 fff4 	bl	80046a4 <HAL_I2C_Mem_Read>

		RAW_Gyro_XOUT = (int16_t)(Data[0]<<8)|(Data[1]);
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	7a7b      	ldrb	r3, [r7, #9]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	827b      	strh	r3, [r7, #18]
		RAW_Gyro_YOUT = (int16_t)(Data[2]<<8)|(Data[3]);
 80016ca:	7abb      	ldrb	r3, [r7, #10]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	823b      	strh	r3, [r7, #16]
		RAW_Gyro_ZOUT = (int16_t)(Data[4]<<8)|(Data[5]);
 80016d8:	7b3b      	ldrb	r3, [r7, #12]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7b7b      	ldrb	r3, [r7, #13]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	81fb      	strh	r3, [r7, #14]

		SensorData->GYRO_XOUT = RAW_Gyro_XOUT/16.4; // LSB/°/s
 80016e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe82 	bl	80003f4 <__aeabi_i2d>
 80016f0:	a341      	add	r3, pc, #260	@ (adr r3, 80017f8 <MPU_6050_Gyroscope_Cali+0x188>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7ff f811 	bl	800071c <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff f9b9 	bl	8000a78 <__aeabi_d2f>
 8001706:	4602      	mov	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
		SensorData->GYRO_YOUT = RAW_Gyro_YOUT/16.4; //MPU_6050_Gyroscope_Cali outputs
 800170c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe6f 	bl	80003f4 <__aeabi_i2d>
 8001716:	a338      	add	r3, pc, #224	@ (adr r3, 80017f8 <MPU_6050_Gyroscope_Cali+0x188>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe fffe 	bl	800071c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f9a6 	bl	8000a78 <__aeabi_d2f>
 800172c:	4602      	mov	r2, r0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]
		SensorData->GYRO_ZOUT = RAW_Gyro_ZOUT/16.4;
 8001732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe5c 	bl	80003f4 <__aeabi_i2d>
 800173c:	a32e      	add	r3, pc, #184	@ (adr r3, 80017f8 <MPU_6050_Gyroscope_Cali+0x188>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ffeb 	bl	800071c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff f993 	bl	8000a78 <__aeabi_d2f>
 8001752:	4602      	mov	r2, r0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
		SensorData->x_cali=SensorData->x_cali+SensorData->GYRO_XOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f7ff f9de 	bl	8000b24 <__addsf3>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
		SensorData->y_cali=SensorData->y_cali+SensorData->GYRO_YOUT;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69da      	ldr	r2, [r3, #28]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f7ff f9d2 	bl	8000b24 <__addsf3>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	61da      	str	r2, [r3, #28]
		SensorData->z_cali=SensorData->z_cali+SensorData->GYRO_ZOUT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff f9c6 	bl	8000b24 <__addsf3>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	621a      	str	r2, [r3, #32]
	for(int i =0 ;i<=1000;i++){
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017ac:	f77f af79 	ble.w	80016a2 <MPU_6050_Gyroscope_Cali+0x32>
	}
	SensorData->x_cali =SensorData->x_cali/1000;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4913      	ldr	r1, [pc, #76]	@ (8001804 <MPU_6050_Gyroscope_Cali+0x194>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb70 	bl	8000e9c <__aeabi_fdiv>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
	SensorData->y_cali =SensorData-> y_cali/1000;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	490e      	ldr	r1, [pc, #56]	@ (8001804 <MPU_6050_Gyroscope_Cali+0x194>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb66 	bl	8000e9c <__aeabi_fdiv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	61da      	str	r2, [r3, #28]
	SensorData->z_cali =SensorData->z_cali/1000;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4909      	ldr	r1, [pc, #36]	@ (8001804 <MPU_6050_Gyroscope_Cali+0x194>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fb5c 	bl	8000e9c <__aeabi_fdiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	621a      	str	r2, [r3, #32]
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	66666666 	.word	0x66666666
 80017fc:	40306666 	.word	0x40306666
 8001800:	20000208 	.word	0x20000208
 8001804:	447a0000 	.word	0x447a0000

08001808 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <DWT_Init+0x38>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10e      	bne.n	8001836 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <DWT_Init+0x38>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <DWT_Init+0x38>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001822:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <DWT_Init+0x3c>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <DWT_Init+0x3c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <DWT_Init+0x3c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6013      	str	r3, [r2, #0]
    }
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000edf0 	.word	0xe000edf0
 8001844:	e0001000 	.word	0xe0001000

08001848 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <DWT_Delay+0x2c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us); // it is modifyt because of m1 core
 8001858:	bf00      	nop
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <DWT_Delay+0x2c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d8f9      	bhi.n	800185a <DWT_Delay+0x12>
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000350 	.word	0x20000350

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b087      	sub	sp, #28
 800187c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187e:	f002 f971 	bl	8003b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001882:	f000 f8bf 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001886:	f000 facb 	bl	8001e20 <MX_GPIO_Init>
  MX_I2C1_Init();
 800188a:	f000 f901 	bl	8001a90 <MX_I2C1_Init>
  MX_I2C2_Init();
 800188e:	f000 f92d 	bl	8001aec <MX_I2C2_Init>
  MX_SPI1_Init();
 8001892:	f000 f959 	bl	8001b48 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001896:	f000 f98d 	bl	8001bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800189a:	f000 fa4f 	bl	8001d3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Motor_Inıt();
 800189e:	f000 fbf3 	bl	8002088 <Motor_Inıt>
  HAL_TIM_Base_Start(&htim1);
 80018a2:	484e      	ldr	r0, [pc, #312]	@ (80019dc <main+0x164>)
 80018a4:	f004 fc40 	bl	8006128 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80018a8:	484d      	ldr	r0, [pc, #308]	@ (80019e0 <main+0x168>)
 80018aa:	f004 fc3d 	bl	8006128 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 80018ae:	2064      	movs	r0, #100	@ 0x64
 80018b0:	f002 f9ba 	bl	8003c28 <HAL_Delay>
  DWT_Init();
 80018b4:	f7ff ffa8 	bl	8001808 <DWT_Init>
  MPU_6050_Init();
 80018b8:	f7ff fc22 	bl	8001100 <MPU_6050_Init>
  HAL_Delay(1000);
 80018bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c0:	f002 f9b2 	bl	8003c28 <HAL_Delay>
  NRF_main_init();
 80018c4:	f000 fb62 	bl	8001f8c <NRF_main_init>
  MPU_6050_Gyroscope_Cali(&SensorData);
 80018c8:	4846      	ldr	r0, [pc, #280]	@ (80019e4 <main+0x16c>)
 80018ca:	f7ff fed1 	bl	8001670 <MPU_6050_Gyroscope_Cali>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
  __HAL_TIM_SET_COUNTER(&htim2,0);
 80018ce:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <main+0x168>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
  NRFSendData("00001", "OK!");
 80018d6:	4944      	ldr	r1, [pc, #272]	@ (80019e8 <main+0x170>)
 80018d8:	4844      	ldr	r0, [pc, #272]	@ (80019ec <main+0x174>)
 80018da:	f000 fb43 	bl	8001f64 <NRFSendData>
	 if((myNRF.RXIRQ==1) && (!myNRF.Busy))
 80018de:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <main+0x178>)
 80018e0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <main+0x82>
 80018e8:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <main+0x178>)
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <main+0x82>
	      {
	      myNRF.RXIRQ==0;
	      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f4:	483f      	ldr	r0, [pc, #252]	@ (80019f4 <main+0x17c>)
 80018f6:	f002 fc65 	bl	80041c4 <HAL_GPIO_TogglePin>
	      }
	 for (int i = 0;i<24;i++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e00f      	b.n	8001920 <main+0xa8>
	  {
	     	Adc_Val1[i] = myNRF.RX_Buffer[i];
 8001900:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <main+0x178>)
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	7819      	ldrb	r1, [r3, #0]
 800190a:	4a3b      	ldr	r2, [pc, #236]	@ (80019f8 <main+0x180>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	460a      	mov	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
	     	HAL_Delay(1);
 8001914:	2001      	movs	r0, #1
 8001916:	f002 f987 	bl	8003c28 <HAL_Delay>
	 for (int i = 0;i<24;i++)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3301      	adds	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b17      	cmp	r3, #23
 8001924:	ddec      	ble.n	8001900 <main+0x88>

	    }
	 for (int j = 1;j<9;j++){
 8001926:	2301      	movs	r3, #1
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	e030      	b.n	800198e <main+0x116>
		 Adc_Val[j-1] = (Adc_Val1[j*3-3]-48)*100 + (Adc_Val1[j*3-2]-48)*10  + Adc_Val1[j]-48;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	4a30      	ldr	r2, [pc, #192]	@ (80019f8 <main+0x180>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	461a      	mov	r2, r3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	0091      	lsls	r1, r2, #2
 8001944:	461a      	mov	r2, r3
 8001946:	460b      	mov	r3, r1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	3b02      	subs	r3, #2
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <main+0x180>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	461a      	mov	r2, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	440b      	add	r3, r1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4923      	ldr	r1, [pc, #140]	@ (80019f8 <main+0x180>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	b2da      	uxtb	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3b01      	subs	r3, #1
 800197a:	3230      	adds	r2, #48	@ 0x30
 800197c:	b2d1      	uxtb	r1, r2
 800197e:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <main+0x184>)
 8001980:	54d1      	strb	r1, [r2, r3]
		 HAL_Delay(1);
 8001982:	2001      	movs	r0, #1
 8001984:	f002 f950 	bl	8003c28 <HAL_Delay>
	 for (int j = 1;j<9;j++){
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b08      	cmp	r3, #8
 8001992:	ddcb      	ble.n	800192c <main+0xb4>
	 }
	 HAL_Delay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f002 f947 	bl	8003c28 <HAL_Delay>
	 Get_IMU_Data();
 800199a:	f000 fb8b 	bl	80020b4 <Get_IMU_Data>
	 Kalman_Angles_Cal(&SensorData);
 800199e:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <main+0x16c>)
 80019a0:	f000 fe74 	bl	800268c <Kalman_Angles_Cal>
	 Control_Motor(Adc_Val[2],Adc_Val[7],Adc_Val[4],0,0,Adc_Val[0],&SensorData);
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <main+0x184>)
 80019a6:	789b      	ldrb	r3, [r3, #2]
 80019a8:	4618      	mov	r0, r3
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <main+0x184>)
 80019ac:	79db      	ldrb	r3, [r3, #7]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <main+0x184>)
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	461c      	mov	r4, r3
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <main+0x184>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <main+0x16c>)
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2300      	movs	r3, #0
 80019c8:	4622      	mov	r2, r4
 80019ca:	f000 fc09 	bl	80021e0 <Control_Motor>
	   T = __HAL_TIM_GET_COUNTER(&htim2);
 80019ce:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <main+0x168>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <main+0x188>)
 80019d6:	6013      	str	r3, [r2, #0]
  while (1){
 80019d8:	e779      	b.n	80018ce <main+0x56>
 80019da:	bf00      	nop
 80019dc:	20000308 	.word	0x20000308
 80019e0:	20000350 	.word	0x20000350
 80019e4:	20000094 	.word	0x20000094
 80019e8:	08007470 	.word	0x08007470
 80019ec:	08007474 	.word	0x08007474
 80019f0:	200000c4 	.word	0x200000c4
 80019f4:	40011000 	.word	0x40011000
 80019f8:	20000144 	.word	0x20000144
 80019fc:	2000015c 	.word	0x2000015c
 8001a00:	20000140 	.word	0x20000140

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b090      	sub	sp, #64	@ 0x40
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	2228      	movs	r2, #40	@ 0x28
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 fa5d 	bl	8006ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a42:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 fc45 	bl	80052dc <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a58:	f000 fe4e 	bl	80026f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2102      	movs	r1, #2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 feb2 	bl	80057e0 <HAL_RCC_ClockConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a82:	f000 fe39 	bl	80026f8 <Error_Handler>
  }
}
 8001a86:	bf00      	nop
 8001a88:	3740      	adds	r7, #64	@ 0x40
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001a96:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <MX_I2C1_Init+0x54>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001a9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <MX_I2C1_Init+0x58>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <MX_I2C1_Init+0x50>)
 8001ace:	f002 fbab 	bl	8004228 <HAL_I2C_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad8:	f000 fe0e 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000208 	.word	0x20000208
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	000186a0 	.word	0x000186a0

08001aec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001af2:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <MX_I2C2_Init+0x54>)
 8001af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001af8:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <MX_I2C2_Init+0x58>)
 8001afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b28:	4804      	ldr	r0, [pc, #16]	@ (8001b3c <MX_I2C2_Init+0x50>)
 8001b2a:	f002 fb7d 	bl	8004228 <HAL_I2C_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b34:	f000 fde0 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000025c 	.word	0x2000025c
 8001b40:	40005800 	.word	0x40005800
 8001b44:	000186a0 	.word	0x000186a0

08001b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b4e:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <MX_SPI1_Init+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b7c:	2230      	movs	r2, #48	@ 0x30
 8001b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b94:	220a      	movs	r2, #10
 8001b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b9a:	f003 ff9b 	bl	8005ad4 <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ba4:	f000 fda8 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200002b0 	.word	0x200002b0
 8001bb0:	40013000 	.word	0x40013000

08001bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b096      	sub	sp, #88	@ 0x58
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2220      	movs	r2, #32
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 f970 	bl	8006ed2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf2:	4b50      	ldr	r3, [pc, #320]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001bf4:	4a50      	ldr	r2, [pc, #320]	@ (8001d38 <MX_TIM1_Init+0x184>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001bfa:	2247      	movs	r2, #71	@ 0x47
 8001bfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8001c04:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b49      	ldr	r3, [pc, #292]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c12:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	4b46      	ldr	r3, [pc, #280]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c1e:	4845      	ldr	r0, [pc, #276]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c20:	f004 fa32 	bl	8006088 <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c2a:	f000 fd65 	bl	80026f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c34:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c38:	4619      	mov	r1, r3
 8001c3a:	483e      	ldr	r0, [pc, #248]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c3c:	f004 fd2e 	bl	800669c <HAL_TIM_ConfigClockSource>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c46:	f000 fd57 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c4a:	483a      	ldr	r0, [pc, #232]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c4c:	f004 fb0e 	bl	800626c <HAL_TIM_PWM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c56:	f000 fd4f 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c66:	4619      	mov	r1, r3
 8001c68:	4832      	ldr	r0, [pc, #200]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c6a:	f005 f883 	bl	8006d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c74:	f000 fd40 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c78:	2360      	movs	r3, #96	@ 0x60
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4825      	ldr	r0, [pc, #148]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001c9e:	f004 fc3b 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ca8:	f000 fd26 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481f      	ldr	r0, [pc, #124]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001cb6:	f004 fc2f 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001cc0:	f000 fd1a 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4819      	ldr	r0, [pc, #100]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001cce:	f004 fc23 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001cd8:	f000 fd0e 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4813      	ldr	r0, [pc, #76]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001ce6:	f004 fc17 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001cf0:	f000 fd02 	bl	80026f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001d18:	f005 f88a 	bl	8006e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001d22:	f000 fce9 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d26:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <MX_TIM1_Init+0x180>)
 8001d28:	f001 fe88 	bl	8003a3c <HAL_TIM_MspPostInit>

}
 8001d2c:	bf00      	nop
 8001d2e:	3758      	adds	r7, #88	@ 0x58
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000308 	.word	0x20000308
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	@ 0x38
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d76:	2247      	movs	r2, #71	@ 0x47
 8001d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b28      	ldr	r3, [pc, #160]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d80:	4b26      	ldr	r3, [pc, #152]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d94:	4821      	ldr	r0, [pc, #132]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001d96:	f004 f977 	bl	8006088 <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001da0:	f000 fcaa 	bl	80026f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dae:	4619      	mov	r1, r3
 8001db0:	481a      	ldr	r0, [pc, #104]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001db2:	f004 fc73 	bl	800669c <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001dbc:	f000 fc9c 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001dc0:	4816      	ldr	r0, [pc, #88]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001dc2:	f004 f9fb 	bl	80061bc <HAL_TIM_OC_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001dcc:	f000 fc94 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480f      	ldr	r0, [pc, #60]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001de0:	f004 ffc8 	bl	8006d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001dea:	f000 fc85 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <MX_TIM2_Init+0xe0>)
 8001e06:	f004 fb2b 	bl	8006460 <HAL_TIM_OC_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e10:	f000 fc72 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3738      	adds	r7, #56	@ 0x38
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000350 	.word	0x20000350

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e34:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a37      	ldr	r2, [pc, #220]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a31      	ldr	r2, [pc, #196]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a25      	ldr	r2, [pc, #148]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <MX_GPIO_Init+0xf8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e9a:	4820      	ldr	r0, [pc, #128]	@ (8001f1c <MX_GPIO_Init+0xfc>)
 8001e9c:	f002 f97a 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Csn_Pin|CE_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2118      	movs	r1, #24
 8001ea4:	481e      	ldr	r0, [pc, #120]	@ (8001f20 <MX_GPIO_Init+0x100>)
 8001ea6:	f002 f975 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4816      	ldr	r0, [pc, #88]	@ (8001f1c <MX_GPIO_Init+0xfc>)
 8001ec4:	f001 ffe2 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Csn_Pin CE_Pin */
  GPIO_InitStruct.Pin = Csn_Pin|CE_Pin;
 8001ec8:	2318      	movs	r3, #24
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	4810      	ldr	r0, [pc, #64]	@ (8001f20 <MX_GPIO_Init+0x100>)
 8001ee0:	f001 ffd4 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <MX_GPIO_Init+0x104>)
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4809      	ldr	r0, [pc, #36]	@ (8001f20 <MX_GPIO_Init+0x100>)
 8001efa:	f001 ffc7 	bl	8003e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2028      	movs	r0, #40	@ 0x28
 8001f04:	f001 ff8b 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f08:	2028      	movs	r0, #40	@ 0x28
 8001f0a:	f001 ffa4 	bl	8003e56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40010800 	.word	0x40010800
 8001f24:	10210000 	.word	0x10210000

08001f28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_15)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f38:	d10c      	bne.n	8001f54 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		if(HAL_nRF24L01P_IRQ_Handler(&myNRF) != HAL_OK)
 8001f3a:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x34>)
 8001f3c:	f000 fd19 	bl	8002972 <HAL_nRF24L01P_IRQ_Handler>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_GPIO_EXTI_Callback+0x22>
		{
			Error_Handler();
 8001f46:	f000 fbd7 	bl	80026f8 <Error_Handler>
		}
		HAL_nRF24L01P_ReadRegister(&myNRF, nRF_STATUS, &regStatus);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0x38>)
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x34>)
 8001f50:	f001 fb34 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
	}
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200000c4 	.word	0x200000c4
 8001f60:	2000013c 	.word	0x2000013c

08001f64 <NRFSendData>:
void NRFSendData(char * nrfID, char * nrfData)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	HAL_nRF24L01P_SetPTXAddress(&myNRF, (uint8_t *) nrfID);
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <NRFSendData+0x24>)
 8001f72:	f000 fdf5 	bl	8002b60 <HAL_nRF24L01P_SetPTXAddress>
	if(HAL_nRF24L01P_TransmitPacketACK(&myNRF, (uint8_t *) nrfData, nRF_DATA_PIPE_0) != HAL_OK)
 8001f76:	2200      	movs	r2, #0
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <NRFSendData+0x24>)
 8001f7c:	f000 fd82 	bl	8002a84 <HAL_nRF24L01P_TransmitPacketACK>
	{
		//Error
	}
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200000c4 	.word	0x200000c4

08001f8c <NRF_main_init>:

void NRF_main_init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	/* ---- myNRF24L01+ Definitions ---- */
	myNRF.hspi = &hspi1;
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <NRF_main_init+0x9c>)
 8001f92:	4a26      	ldr	r2, [pc, #152]	@ (800202c <NRF_main_init+0xa0>)
 8001f94:	601a      	str	r2, [r3, #0]
	myNRF.CRC_Width = nRF_CRC_WIDTH_BYTE;
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <NRF_main_init+0x9c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	711a      	strb	r2, [r3, #4]
	myNRF.ADDR_Width = nRF_ADDR_WIDTH_5;
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <NRF_main_init+0x9c>)
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	715a      	strb	r2, [r3, #5]
	myNRF.Data_Rate = nRF_DATA_RATE_250KBPS;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <NRF_main_init+0x9c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	719a      	strb	r2, [r3, #6]
	myNRF.TX_Power = nRF_TX_PWR_M18dBm;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <NRF_main_init+0x9c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	71da      	strb	r2, [r3, #7]
	myNRF.State = nRF_STATE_RX;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <NRF_main_init+0x9c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	721a      	strb	r2, [r3, #8]

	myNRF.RF_Channel = 1;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <NRF_main_init+0x9c>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	725a      	strb	r2, [r3, #9]
	myNRF.PayloadWidth = nRF_RXPW_32BYTES;
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <NRF_main_init+0x9c>)
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	729a      	strb	r2, [r3, #10]
	myNRF.RetransmitCount = nRF_RETX_DISABLED;// nRF_RETX_COUNT_15;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <NRF_main_init+0x9c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	72da      	strb	r2, [r3, #11]
	myNRF.RetransmitDelay = nRF_RETX_DELAY_250uS; //nRF_RETX_DELAY_4000uS;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <NRF_main_init+0x9c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	731a      	strb	r2, [r3, #12]

	myNRF.RX_Address = (uint8_t *)"00000";
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <NRF_main_init+0x9c>)
 8001fce:	4a18      	ldr	r2, [pc, #96]	@ (8002030 <NRF_main_init+0xa4>)
 8001fd0:	611a      	str	r2, [r3, #16]
	myNRF.TX_Address = (uint8_t *)"00001";
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <NRF_main_init+0x9c>)
 8001fd4:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <NRF_main_init+0xa8>)
 8001fd6:	615a      	str	r2, [r3, #20]

	myNRF.RX_Buffer = RXBuffer;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <NRF_main_init+0x9c>)
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <NRF_main_init+0xac>)
 8001fdc:	61da      	str	r2, [r3, #28]
	myNRF.TX_Buffer = TXBuffer;
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <NRF_main_init+0x9c>)
 8001fe0:	4a16      	ldr	r2, [pc, #88]	@ (800203c <NRF_main_init+0xb0>)
 8001fe2:	621a      	str	r2, [r3, #32]

	myNRF.nRF_nSS_GPIO_PORT = GPIOA;
 8001fe4:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <NRF_main_init+0x9c>)
 8001fe6:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <NRF_main_init+0xb4>)
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24
	myNRF.nRF_nSS_GPIO_PIN = GPIO_PIN_3;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <NRF_main_init+0x9c>)
 8001fec:	2208      	movs	r2, #8
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28

	myNRF.nRF_CE_GPIO_PORT = GPIOA;
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <NRF_main_init+0x9c>)
 8001ff2:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <NRF_main_init+0xb4>)
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
	myNRF.nRF_CE_GPIO_PIN = GPIO_PIN_4;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <NRF_main_init+0x9c>)
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	861a      	strh	r2, [r3, #48]	@ 0x30

	//ekleme
	myNRF.RXIRQ = 0;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <NRF_main_init+0x9c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	myNRF.TXIRQ = 0;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <NRF_main_init+0x9c>)
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	myNRF.MaxReIRQ = 0;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <NRF_main_init+0x9c>)
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	/* ---- myNRF24L01+ Definitions ---- */


	if(HAL_nRF24L01P_Init(&myNRF) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	@ (8002028 <NRF_main_init+0x9c>)
 8002016:	f000 fb75 	bl	8002704 <HAL_nRF24L01P_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <NRF_main_init+0x98>
	{
		Error_Handler();
 8002020:	f000 fb6a 	bl	80026f8 <Error_Handler>
	}
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200000c4 	.word	0x200000c4
 800202c:	200002b0 	.word	0x200002b0
 8002030:	0800747c 	.word	0x0800747c
 8002034:	08007474 	.word	0x08007474
 8002038:	200000fc 	.word	0x200000fc
 800203c:	2000011c 	.word	0x2000011c
 8002040:	40010800 	.word	0x40010800

08002044 <Motor_control>:
void Motor_control(uint8_t m1,uint8_t m2,uint8_t m3,uint8_t m4){
 8002044:	b490      	push	{r4, r7}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4604      	mov	r4, r0
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	4603      	mov	r3, r0
 8002058:	71bb      	strb	r3, [r7, #6]
 800205a:	460b      	mov	r3, r1
 800205c:	717b      	strb	r3, [r7, #5]
 800205e:	4613      	mov	r3, r2
 8002060:	713b      	strb	r3, [r7, #4]
	 TIM1->CCR1 = m2;
 8002062:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <Motor_control+0x40>)
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	6353      	str	r3, [r2, #52]	@ 0x34
	 TIM1->CCR2 = m3;
 8002068:	4a06      	ldr	r2, [pc, #24]	@ (8002084 <Motor_control+0x40>)
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	6393      	str	r3, [r2, #56]	@ 0x38
	 TIM1->CCR3 = m1;
 800206e:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <Motor_control+0x40>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	63d3      	str	r3, [r2, #60]	@ 0x3c
	 TIM1->CCR4 = m4;
 8002074:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <Motor_control+0x40>)
 8002076:	793b      	ldrb	r3, [r7, #4]
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bc90      	pop	{r4, r7}
 8002082:	4770      	bx	lr
 8002084:	40012c00 	.word	0x40012c00

08002088 <Motor_Inıt>:

void Motor_Inıt(){
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800208c:	2100      	movs	r1, #0
 800208e:	4808      	ldr	r0, [pc, #32]	@ (80020b0 <Motor_Inıt+0x28>)
 8002090:	f004 f944 	bl	800631c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002094:	2104      	movs	r1, #4
 8002096:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <Motor_Inıt+0x28>)
 8002098:	f004 f940 	bl	800631c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800209c:	2108      	movs	r1, #8
 800209e:	4804      	ldr	r0, [pc, #16]	@ (80020b0 <Motor_Inıt+0x28>)
 80020a0:	f004 f93c 	bl	800631c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80020a4:	210c      	movs	r1, #12
 80020a6:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <Motor_Inıt+0x28>)
 80020a8:	f004 f938 	bl	800631c <HAL_TIM_PWM_Start>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000308 	.word	0x20000308

080020b4 <Get_IMU_Data>:
void Get_IMU_Data(){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	MPU_6050_Accelerometer_Read(&SensorData);
 80020b8:	4806      	ldr	r0, [pc, #24]	@ (80020d4 <Get_IMU_Data+0x20>)
 80020ba:	f7ff f8b9 	bl	8001230 <MPU_6050_Accelerometer_Read>
	MPU_6050_Angle(&SensorData);
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <Get_IMU_Data+0x20>)
 80020c0:	f7ff f926 	bl	8001310 <MPU_6050_Angle>
	MPU_6050_Gyroscope_Read(&SensorData);
 80020c4:	4803      	ldr	r0, [pc, #12]	@ (80020d4 <Get_IMU_Data+0x20>)
 80020c6:	f7ff fa33 	bl	8001530 <MPU_6050_Gyroscope_Read>
	 MPU_6050_Temp_Read();
 80020ca:	f7ff f875 	bl	80011b8 <MPU_6050_Temp_Read>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000094 	.word	0x20000094

080020d8 <PID_equation>:

void PID_equation(float Error,float P,float I,float D,float PrevError,float PrevItern){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
	float Pterm= P*Error;
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f7fe fe23 	bl	8000d34 <__aeabi_fmul>
 80020ee:	4603      	mov	r3, r0
 80020f0:	617b      	str	r3, [r7, #20]
	float Iterm = PrevItern+I*(Error+PrevError)*Sn/2;
 80020f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7fe fd15 	bl	8000b24 <__addsf3>
 80020fa:	4603      	mov	r3, r0
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fe18 	bl	8000d34 <__aeabi_fmul>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <PID_equation+0xf8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f7fe fe10 	bl	8000d34 <__aeabi_fmul>
 8002114:	4603      	mov	r3, r0
 8002116:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe febe 	bl	8000e9c <__aeabi_fdiv>
 8002120:	4603      	mov	r3, r0
 8002122:	4619      	mov	r1, r3
 8002124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002126:	f7fe fcfd 	bl	8000b24 <__addsf3>
 800212a:	4603      	mov	r3, r0
 800212c:	61fb      	str	r3, [r7, #28]
	if(Iterm>50){Iterm=50;}
 800212e:	4929      	ldr	r1, [pc, #164]	@ (80021d4 <PID_equation+0xfc>)
 8002130:	69f8      	ldr	r0, [r7, #28]
 8002132:	f7fe ffbb 	bl	80010ac <__aeabi_fcmpgt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <PID_equation+0x6a>
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <PID_equation+0xfc>)
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	e008      	b.n	8002154 <PID_equation+0x7c>
	else if(Iterm<=-50){Iterm=-50;}
 8002142:	4925      	ldr	r1, [pc, #148]	@ (80021d8 <PID_equation+0x100>)
 8002144:	69f8      	ldr	r0, [r7, #28]
 8002146:	f7fe ff9d 	bl	8001084 <__aeabi_fcmple>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <PID_equation+0x7c>
 8002150:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <PID_equation+0x100>)
 8002152:	61fb      	str	r3, [r7, #28]
	float Dterm=D*(Error-PrevError)/Sn;
 8002154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7fe fce2 	bl	8000b20 <__aeabi_fsub>
 800215c:	4603      	mov	r3, r0
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fde7 	bl	8000d34 <__aeabi_fmul>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <PID_equation+0xf8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f7fe fe93 	bl	8000e9c <__aeabi_fdiv>
 8002176:	4603      	mov	r3, r0
 8002178:	613b      	str	r3, [r7, #16]
	float PIDout=Pterm+Iterm+Dterm;
 800217a:	69f9      	ldr	r1, [r7, #28]
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7fe fcd1 	bl	8000b24 <__addsf3>
 8002182:	4603      	mov	r3, r0
 8002184:	4619      	mov	r1, r3
 8002186:	6938      	ldr	r0, [r7, #16]
 8002188:	f7fe fccc 	bl	8000b24 <__addsf3>
 800218c:	4603      	mov	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
	if(PIDout>50){PIDout=50;}
 8002190:	4910      	ldr	r1, [pc, #64]	@ (80021d4 <PID_equation+0xfc>)
 8002192:	69b8      	ldr	r0, [r7, #24]
 8002194:	f7fe ff8a 	bl	80010ac <__aeabi_fcmpgt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <PID_equation+0xcc>
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <PID_equation+0xfc>)
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	e008      	b.n	80021b6 <PID_equation+0xde>
	else if(PIDout<=-50){PIDout=-50;}
 80021a4:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <PID_equation+0x100>)
 80021a6:	69b8      	ldr	r0, [r7, #24]
 80021a8:	f7fe ff6c 	bl	8001084 <__aeabi_fcmple>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <PID_equation+0xde>
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <PID_equation+0x100>)
 80021b4:	61bb      	str	r3, [r7, #24]
	PID_return[0]=PIDout;
 80021b6:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <PID_equation+0x104>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6013      	str	r3, [r2, #0]
	PID_return[1]=Error;
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <PID_equation+0x104>)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6053      	str	r3, [r2, #4]
	PID_return[2]=Iterm;
 80021c2:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <PID_equation+0x104>)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	6093      	str	r3, [r2, #8]
}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	42480000 	.word	0x42480000
 80021d8:	c2480000 	.word	0xc2480000
 80021dc:	200001ac 	.word	0x200001ac

080021e0 <Control_Motor>:
	 PIR_Roll=0,PIR_Pitch=0,PIR_Yaw=0;
	 PE_ER_Roll_Angle=0,PE_ER_Pitch_Angle=0;
	 PIR_Roll_Angle=0,PIR_Pitch_Angle=0;
}

void Control_Motor(uint8_t Trottle,uint8_t Roll,uint8_t Pitch,uint8_t Roll_Angle,uint8_t Pitch_Angle,uint8_t Yaw,SensorData_t *SensorData){
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	4603      	mov	r3, r0
 80021f4:	71bb      	strb	r3, [r7, #6]
 80021f6:	460b      	mov	r3, r1
 80021f8:	717b      	strb	r3, [r7, #5]
 80021fa:	4613      	mov	r3, r2
 80021fc:	713b      	strb	r3, [r7, #4]
	ER_Roll_Angle=-Roll_Angle-K_Angle_Roll;
 80021fe:	793b      	ldrb	r3, [r7, #4]
 8002200:	425b      	negs	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fd42 	bl	8000c8c <__aeabi_i2f>
 8002208:	4602      	mov	r2, r0
 800220a:	4b8e      	ldr	r3, [pc, #568]	@ (8002444 <Control_Motor+0x264>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f7fe fc85 	bl	8000b20 <__aeabi_fsub>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	4b8b      	ldr	r3, [pc, #556]	@ (8002448 <Control_Motor+0x268>)
 800221c:	601a      	str	r2, [r3, #0]
	ER_Pitch_Angle=-Pitch_Angle-K_Angle_Pitch;
 800221e:	7e3b      	ldrb	r3, [r7, #24]
 8002220:	425b      	negs	r3, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fd32 	bl	8000c8c <__aeabi_i2f>
 8002228:	4602      	mov	r2, r0
 800222a:	4b88      	ldr	r3, [pc, #544]	@ (800244c <Control_Motor+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f7fe fc75 	bl	8000b20 <__aeabi_fsub>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	4b85      	ldr	r3, [pc, #532]	@ (8002450 <Control_Motor+0x270>)
 800223c:	601a      	str	r2, [r3, #0]
	PID_equation(ER_Roll_Angle,P_Angle_Roll,I_Angle_Roll,D_Angle_Roll,PE_ER_Roll_Angle,PIR_Roll_Angle);
 800223e:	4b82      	ldr	r3, [pc, #520]	@ (8002448 <Control_Motor+0x268>)
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	4b84      	ldr	r3, [pc, #528]	@ (8002454 <Control_Motor+0x274>)
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	4b84      	ldr	r3, [pc, #528]	@ (8002458 <Control_Motor+0x278>)
 8002248:	681c      	ldr	r4, [r3, #0]
 800224a:	4b84      	ldr	r3, [pc, #528]	@ (800245c <Control_Motor+0x27c>)
 800224c:	681d      	ldr	r5, [r3, #0]
 800224e:	4b84      	ldr	r3, [pc, #528]	@ (8002460 <Control_Motor+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a84      	ldr	r2, [pc, #528]	@ (8002464 <Control_Motor+0x284>)
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	9201      	str	r2, [sp, #4]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	462b      	mov	r3, r5
 800225c:	4622      	mov	r2, r4
 800225e:	f7ff ff3b 	bl	80020d8 <PID_equation>
	Roll=PID_return[0];
 8002262:	4b81      	ldr	r3, [pc, #516]	@ (8002468 <Control_Motor+0x288>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff2a 	bl	80010c0 <__aeabi_f2uiz>
 800226c:	4603      	mov	r3, r0
 800226e:	71bb      	strb	r3, [r7, #6]
	PE_ER_Roll_Angle=PID_return[1];
 8002270:	4b7d      	ldr	r3, [pc, #500]	@ (8002468 <Control_Motor+0x288>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a7a      	ldr	r2, [pc, #488]	@ (8002460 <Control_Motor+0x280>)
 8002276:	6013      	str	r3, [r2, #0]
	PIR_Roll_Angle=PID_return[2];
 8002278:	4b7b      	ldr	r3, [pc, #492]	@ (8002468 <Control_Motor+0x288>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a79      	ldr	r2, [pc, #484]	@ (8002464 <Control_Motor+0x284>)
 800227e:	6013      	str	r3, [r2, #0]
	PID_equation(ER_Pitch_Angle,P_Angle_Pitch,I_Angle_Pitch,D_Angle_Pitch,PE_ER_Pitch_Angle,PIR_Pitch_Angle);
 8002280:	4b73      	ldr	r3, [pc, #460]	@ (8002450 <Control_Motor+0x270>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	4b79      	ldr	r3, [pc, #484]	@ (800246c <Control_Motor+0x28c>)
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	4b79      	ldr	r3, [pc, #484]	@ (8002470 <Control_Motor+0x290>)
 800228a:	681c      	ldr	r4, [r3, #0]
 800228c:	4b79      	ldr	r3, [pc, #484]	@ (8002474 <Control_Motor+0x294>)
 800228e:	681d      	ldr	r5, [r3, #0]
 8002290:	4b79      	ldr	r3, [pc, #484]	@ (8002478 <Control_Motor+0x298>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a79      	ldr	r2, [pc, #484]	@ (800247c <Control_Motor+0x29c>)
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	9201      	str	r2, [sp, #4]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	462b      	mov	r3, r5
 800229e:	4622      	mov	r2, r4
 80022a0:	f7ff ff1a 	bl	80020d8 <PID_equation>
	Pitch=PID_return[0];
 80022a4:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <Control_Motor+0x288>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ff09 	bl	80010c0 <__aeabi_f2uiz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	717b      	strb	r3, [r7, #5]
	PE_ER_Pitch_Angle=PID_return[1];
 80022b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002468 <Control_Motor+0x288>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a70      	ldr	r2, [pc, #448]	@ (8002478 <Control_Motor+0x298>)
 80022b8:	6013      	str	r3, [r2, #0]
	PIR_Pitch_Angle=PID_return[2];
 80022ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002468 <Control_Motor+0x288>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4a6f      	ldr	r2, [pc, #444]	@ (800247c <Control_Motor+0x29c>)
 80022c0:	6013      	str	r3, [r2, #0]
	ER_Roll=Roll-(-SensorData->GYRO_XOUT);
 80022c2:	79bb      	ldrb	r3, [r7, #6]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fce1 	bl	8000c8c <__aeabi_i2f>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fc26 	bl	8000b24 <__addsf3>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	4b68      	ldr	r3, [pc, #416]	@ (8002480 <Control_Motor+0x2a0>)
 80022de:	601a      	str	r2, [r3, #0]
	ER_Pitch=Pitch-(-SensorData->GYRO_YOUT);
 80022e0:	797b      	ldrb	r3, [r7, #5]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fcd2 	bl	8000c8c <__aeabi_i2f>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4610      	mov	r0, r2
 80022f2:	f7fe fc17 	bl	8000b24 <__addsf3>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b62      	ldr	r3, [pc, #392]	@ (8002484 <Control_Motor+0x2a4>)
 80022fc:	601a      	str	r2, [r3, #0]
	ER_Yaw=Yaw-(-SensorData->GYRO_ZOUT);
 80022fe:	7f3b      	ldrb	r3, [r7, #28]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fcc3 	bl	8000c8c <__aeabi_i2f>
 8002306:	4602      	mov	r2, r0
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f7fe fc08 	bl	8000b24 <__addsf3>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	4b5b      	ldr	r3, [pc, #364]	@ (8002488 <Control_Motor+0x2a8>)
 800231a:	601a      	str	r2, [r3, #0]
	PID_equation(ER_Roll,PRateRoll,IRateRoll,DRateRoll,PE_ER_Roll,PIR_Roll);
 800231c:	4b58      	ldr	r3, [pc, #352]	@ (8002480 <Control_Motor+0x2a0>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <Control_Motor+0x2ac>)
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <Control_Motor+0x2b0>)
 8002326:	681c      	ldr	r4, [r3, #0]
 8002328:	4b5a      	ldr	r3, [pc, #360]	@ (8002494 <Control_Motor+0x2b4>)
 800232a:	681d      	ldr	r5, [r3, #0]
 800232c:	4b5a      	ldr	r3, [pc, #360]	@ (8002498 <Control_Motor+0x2b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5a      	ldr	r2, [pc, #360]	@ (800249c <Control_Motor+0x2bc>)
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	9201      	str	r2, [sp, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	462b      	mov	r3, r5
 800233a:	4622      	mov	r2, r4
 800233c:	f7ff fecc 	bl	80020d8 <PID_equation>
	IN_Roll=PID_return[0];
 8002340:	4b49      	ldr	r3, [pc, #292]	@ (8002468 <Control_Motor+0x288>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a56      	ldr	r2, [pc, #344]	@ (80024a0 <Control_Motor+0x2c0>)
 8002346:	6013      	str	r3, [r2, #0]
	PE_ER_Roll=PID_return[1];
 8002348:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <Control_Motor+0x288>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	@ (8002498 <Control_Motor+0x2b8>)
 800234e:	6013      	str	r3, [r2, #0]
	PIR_Roll=PID_return[2];
 8002350:	4b45      	ldr	r3, [pc, #276]	@ (8002468 <Control_Motor+0x288>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a51      	ldr	r2, [pc, #324]	@ (800249c <Control_Motor+0x2bc>)
 8002356:	6013      	str	r3, [r2, #0]
	PID_equation(ER_Pitch,PRatePitch,IRatePitch,DRatePitch,PE_ER_Pitch,PIR_Pitch);
 8002358:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <Control_Motor+0x2a4>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	4b51      	ldr	r3, [pc, #324]	@ (80024a4 <Control_Motor+0x2c4>)
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <Control_Motor+0x2c8>)
 8002362:	681c      	ldr	r4, [r3, #0]
 8002364:	4b51      	ldr	r3, [pc, #324]	@ (80024ac <Control_Motor+0x2cc>)
 8002366:	681d      	ldr	r5, [r3, #0]
 8002368:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <Control_Motor+0x2d0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a51      	ldr	r2, [pc, #324]	@ (80024b4 <Control_Motor+0x2d4>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	9201      	str	r2, [sp, #4]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	462b      	mov	r3, r5
 8002376:	4622      	mov	r2, r4
 8002378:	f7ff feae 	bl	80020d8 <PID_equation>
	IN_Pitch=PID_return[0];
 800237c:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <Control_Motor+0x288>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a4d      	ldr	r2, [pc, #308]	@ (80024b8 <Control_Motor+0x2d8>)
 8002382:	6013      	str	r3, [r2, #0]
	PE_ER_Pitch=PID_return[1];
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <Control_Motor+0x288>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a49      	ldr	r2, [pc, #292]	@ (80024b0 <Control_Motor+0x2d0>)
 800238a:	6013      	str	r3, [r2, #0]
	PIR_Pitch=PID_return[2];
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <Control_Motor+0x288>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a48      	ldr	r2, [pc, #288]	@ (80024b4 <Control_Motor+0x2d4>)
 8002392:	6013      	str	r3, [r2, #0]
	PID_equation(ER_Yaw,PRateYaw,IRateYaw,DRateYaw,PE_ER_Yaw,PIR_Yaw);
 8002394:	4b3c      	ldr	r3, [pc, #240]	@ (8002488 <Control_Motor+0x2a8>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	4b48      	ldr	r3, [pc, #288]	@ (80024bc <Control_Motor+0x2dc>)
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <Control_Motor+0x2e0>)
 800239e:	681c      	ldr	r4, [r3, #0]
 80023a0:	4b48      	ldr	r3, [pc, #288]	@ (80024c4 <Control_Motor+0x2e4>)
 80023a2:	681d      	ldr	r5, [r3, #0]
 80023a4:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <Control_Motor+0x2e8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a48      	ldr	r2, [pc, #288]	@ (80024cc <Control_Motor+0x2ec>)
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	9201      	str	r2, [sp, #4]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	462b      	mov	r3, r5
 80023b2:	4622      	mov	r2, r4
 80023b4:	f7ff fe90 	bl	80020d8 <PID_equation>
	IN_Yaw=PID_return[0];
 80023b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <Control_Motor+0x288>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a44      	ldr	r2, [pc, #272]	@ (80024d0 <Control_Motor+0x2f0>)
 80023be:	6013      	str	r3, [r2, #0]
	PE_ER_Yaw=PID_return[1];
 80023c0:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <Control_Motor+0x288>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a40      	ldr	r2, [pc, #256]	@ (80024c8 <Control_Motor+0x2e8>)
 80023c6:	6013      	str	r3, [r2, #0]
	PIR_Yaw=PID_return[2];
 80023c8:	4b27      	ldr	r3, [pc, #156]	@ (8002468 <Control_Motor+0x288>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a3f      	ldr	r2, [pc, #252]	@ (80024cc <Control_Motor+0x2ec>)
 80023ce:	6013      	str	r3, [r2, #0]

	if(Trottle>=255){Trottle=255;}
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d101      	bne.n	80023da <Control_Motor+0x1fa>
 80023d6:	23ff      	movs	r3, #255	@ 0xff
 80023d8:	71fb      	strb	r3, [r7, #7]

	M1=Trottle-IN_Roll-IN_Pitch-IN_Yaw;
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fc55 	bl	8000c8c <__aeabi_i2f>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <Control_Motor+0x2c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f7fe fb98 	bl	8000b20 <__aeabi_fsub>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b30      	ldr	r3, [pc, #192]	@ (80024b8 <Control_Motor+0x2d8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe fb90 	bl	8000b20 <__aeabi_fsub>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	4b32      	ldr	r3, [pc, #200]	@ (80024d0 <Control_Motor+0x2f0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7fe fb88 	bl	8000b20 <__aeabi_fsub>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fe54 	bl	80010c0 <__aeabi_f2uiz>
 8002418:	4603      	mov	r3, r0
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <Control_Motor+0x2f4>)
 800241e:	701a      	strb	r2, [r3, #0]
	M2=Trottle-IN_Roll+IN_Pitch+IN_Yaw;
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc32 	bl	8000c8c <__aeabi_i2f>
 8002428:	4602      	mov	r2, r0
 800242a:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <Control_Motor+0x2c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f7fe fb75 	bl	8000b20 <__aeabi_fsub>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <Control_Motor+0x2d8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	e049      	b.n	80024d8 <Control_Motor+0x2f8>
 8002444:	200001f4 	.word	0x200001f4
 8002448:	20000170 	.word	0x20000170
 800244c:	200001f8 	.word	0x200001f8
 8002450:	20000174 	.word	0x20000174
 8002454:	200001dc 	.word	0x200001dc
 8002458:	200001e4 	.word	0x200001e4
 800245c:	200001ec 	.word	0x200001ec
 8002460:	20000190 	.word	0x20000190
 8002464:	200001a4 	.word	0x200001a4
 8002468:	200001ac 	.word	0x200001ac
 800246c:	200001e0 	.word	0x200001e0
 8002470:	200001e8 	.word	0x200001e8
 8002474:	200001f0 	.word	0x200001f0
 8002478:	20000194 	.word	0x20000194
 800247c:	200001a8 	.word	0x200001a8
 8002480:	20000164 	.word	0x20000164
 8002484:	20000168 	.word	0x20000168
 8002488:	2000016c 	.word	0x2000016c
 800248c:	200001b8 	.word	0x200001b8
 8002490:	200001c4 	.word	0x200001c4
 8002494:	200001d0 	.word	0x200001d0
 8002498:	20000184 	.word	0x20000184
 800249c:	20000198 	.word	0x20000198
 80024a0:	20000178 	.word	0x20000178
 80024a4:	200001bc 	.word	0x200001bc
 80024a8:	200001c8 	.word	0x200001c8
 80024ac:	200001d4 	.word	0x200001d4
 80024b0:	20000188 	.word	0x20000188
 80024b4:	2000019c 	.word	0x2000019c
 80024b8:	2000017c 	.word	0x2000017c
 80024bc:	200001c0 	.word	0x200001c0
 80024c0:	200001cc 	.word	0x200001cc
 80024c4:	200001d8 	.word	0x200001d8
 80024c8:	2000018c 	.word	0x2000018c
 80024cc:	200001a0 	.word	0x200001a0
 80024d0:	20000180 	.word	0x20000180
 80024d4:	20000204 	.word	0x20000204
 80024d8:	f7fe fb24 	bl	8000b24 <__addsf3>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <Control_Motor+0x3c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f7fe fb1c 	bl	8000b24 <__addsf3>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fde6 	bl	80010c0 <__aeabi_f2uiz>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <Control_Motor+0x3c8>)
 80024fa:	701a      	strb	r2, [r3, #0]
	M3=Trottle+IN_Roll+IN_Pitch-IN_Yaw;
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fbc4 	bl	8000c8c <__aeabi_i2f>
 8002504:	4602      	mov	r2, r0
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <Control_Motor+0x3cc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4619      	mov	r1, r3
 800250c:	4610      	mov	r0, r2
 800250e:	f7fe fb09 	bl	8000b24 <__addsf3>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <Control_Motor+0x3d0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f7fe fb01 	bl	8000b24 <__addsf3>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <Control_Motor+0x3c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f7fe faf7 	bl	8000b20 <__aeabi_fsub>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fdc3 	bl	80010c0 <__aeabi_f2uiz>
 800253a:	4603      	mov	r3, r0
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <Control_Motor+0x3d4>)
 8002540:	701a      	strb	r2, [r3, #0]
	M4=Trottle+IN_Roll-IN_Pitch+IN_Yaw;
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fba1 	bl	8000c8c <__aeabi_i2f>
 800254a:	4602      	mov	r2, r0
 800254c:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <Control_Motor+0x3cc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7fe fae6 	bl	8000b24 <__addsf3>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <Control_Motor+0x3d0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7fe fadc 	bl	8000b20 <__aeabi_fsub>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <Control_Motor+0x3c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f7fe fad6 	bl	8000b24 <__addsf3>
 8002578:	4603      	mov	r3, r0
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fda0 	bl	80010c0 <__aeabi_f2uiz>
 8002580:	4603      	mov	r3, r0
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <Control_Motor+0x3d8>)
 8002586:	701a      	strb	r2, [r3, #0]

	Motor_control(M1,M2,M3,M4);
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <Control_Motor+0x3dc>)
 800258a:	7818      	ldrb	r0, [r3, #0]
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <Control_Motor+0x3c8>)
 800258e:	7819      	ldrb	r1, [r3, #0]
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <Control_Motor+0x3d4>)
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <Control_Motor+0x3d8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f7ff fd54 	bl	8002044 <Motor_control>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	20000180 	.word	0x20000180
 80025a8:	20000205 	.word	0x20000205
 80025ac:	20000178 	.word	0x20000178
 80025b0:	2000017c 	.word	0x2000017c
 80025b4:	20000206 	.word	0x20000206
 80025b8:	20000207 	.word	0x20000207
 80025bc:	20000204 	.word	0x20000204

080025c0 <Kalman_filter>:

void Kalman_filter(float Kalman_state,float Kalman_Uncertanity,float Kalman_Input,float Kalman_Mesurement){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
	Kalman_state=Kalman_state+Sn*Kalman_Input;
 80025ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002680 <Kalman_filter+0xc0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fbad 	bl	8000d34 <__aeabi_fmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7fe faa0 	bl	8000b24 <__addsf3>
 80025e4:	4603      	mov	r3, r0
 80025e6:	60fb      	str	r3, [r7, #12]
	Kalman_Uncertanity=Kalman_Uncertanity+Sn*Sn*4*4;
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <Kalman_filter+0xc0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <Kalman_filter+0xc0>)
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fb9e 	bl	8000d34 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fb98 	bl	8000d34 <__aeabi_fmul>
 8002604:	4603      	mov	r3, r0
 8002606:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fb92 	bl	8000d34 <__aeabi_fmul>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	68b8      	ldr	r0, [r7, #8]
 8002616:	f7fe fa85 	bl	8000b24 <__addsf3>
 800261a:	4603      	mov	r3, r0
 800261c:	60bb      	str	r3, [r7, #8]
	float Kalman_Gain= Kalman_Uncertanity*1/(1*Kalman_Uncertanity+3*3);
 800261e:	4919      	ldr	r1, [pc, #100]	@ (8002684 <Kalman_filter+0xc4>)
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f7fe fa7f 	bl	8000b24 <__addsf3>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	68b8      	ldr	r0, [r7, #8]
 800262c:	f7fe fc36 	bl	8000e9c <__aeabi_fdiv>
 8002630:	4603      	mov	r3, r0
 8002632:	617b      	str	r3, [r7, #20]
	Kalman_state=Kalman_state+Kalman_Gain*(Kalman_Mesurement-Kalman_state);
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f7fe fa72 	bl	8000b20 <__aeabi_fsub>
 800263c:	4603      	mov	r3, r0
 800263e:	6979      	ldr	r1, [r7, #20]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb77 	bl	8000d34 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	4619      	mov	r1, r3
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7fe fa6a 	bl	8000b24 <__addsf3>
 8002650:	4603      	mov	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]
	Kalman_Uncertanity=(1-Kalman_Gain)*Kalman_Uncertanity;
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800265a:	f7fe fa61 	bl	8000b20 <__aeabi_fsub>
 800265e:	4603      	mov	r3, r0
 8002660:	4619      	mov	r1, r3
 8002662:	68b8      	ldr	r0, [r7, #8]
 8002664:	f7fe fb66 	bl	8000d34 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	60bb      	str	r3, [r7, #8]
	Kalman_Output[0]=Kalman_state;
 800266c:	4a06      	ldr	r2, [pc, #24]	@ (8002688 <Kalman_filter+0xc8>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6013      	str	r3, [r2, #0]
	Kalman_Output[1]=Kalman_Uncertanity;
 8002672:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <Kalman_filter+0xc8>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6053      	str	r3, [r2, #4]
}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000000 	.word	0x20000000
 8002684:	41100000 	.word	0x41100000
 8002688:	200001fc 	.word	0x200001fc

0800268c <Kalman_Angles_Cal>:

void Kalman_Angles_Cal(SensorData_t *SensorData){
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	Kalman_filter( K_Angle_Roll, KU_Angle_Roll,SensorData->GYRO_YOUT,SensorData->Angle_Y);
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <Kalman_Angles_Cal+0x58>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <Kalman_Angles_Cal+0x5c>)
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f7ff ff8c 	bl	80025c0 <Kalman_filter>
	K_Angle_Roll=Kalman_Output[0];
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <Kalman_Angles_Cal+0x60>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <Kalman_Angles_Cal+0x58>)
 80026ae:	6013      	str	r3, [r2, #0]
	KU_Angle_Roll=Kalman_Output[1];
 80026b0:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <Kalman_Angles_Cal+0x60>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <Kalman_Angles_Cal+0x5c>)
 80026b6:	6013      	str	r3, [r2, #0]
	Kalman_filter( K_Angle_Pitch, KU_Angle_Pitch,SensorData->GYRO_XOUT,SensorData->Angle_X);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <Kalman_Angles_Cal+0x64>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <Kalman_Angles_Cal+0x68>)
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f7ff ff7a 	bl	80025c0 <Kalman_filter>
	K_Angle_Pitch=Kalman_Output[0];
 80026cc:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <Kalman_Angles_Cal+0x60>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <Kalman_Angles_Cal+0x64>)
 80026d2:	6013      	str	r3, [r2, #0]
	KU_Angle_Pitch=Kalman_Output[1];
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <Kalman_Angles_Cal+0x60>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a06      	ldr	r2, [pc, #24]	@ (80026f4 <Kalman_Angles_Cal+0x68>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200001f4 	.word	0x200001f4
 80026e8:	20000004 	.word	0x20000004
 80026ec:	200001fc 	.word	0x200001fc
 80026f0:	200001f8 	.word	0x200001f8
 80026f4:	20000008 	.word	0x20000008

080026f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026fc:	b672      	cpsid	i
}
 80026fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <Error_Handler+0x8>

08002704 <HAL_nRF24L01P_Init>:
#include "nRF24L01P.h"
#include "dwt_delay.h"

HAL_StatusTypeDef HAL_nRF24L01P_Init(nRF24L01P *nRF)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	HAL_StatusTypeDef retValue = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE) != HAL_OK)
 8002710:	2101      	movs	r1, #1
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fc2a 	bl	8002f6c <HAL_nRF24L01P_PowerUP>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_nRF24L01P_Init+0x1e>
	{
		return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e123      	b.n	800296a <HAL_nRF24L01P_Init+0x266>
	}
	
	do {
			if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002722:	f107 030e 	add.w	r3, r7, #14
 8002726:	461a      	mov	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 ff46 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_nRF24L01P_Init+0x36>
			{
				return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e117      	b.n	800296a <HAL_nRF24L01P_Init+0x266>
			}
	} while((regValue & 0x02) == 0x00); // Did device powered up? 
 800273a:	7bbb      	ldrb	r3, [r7, #14]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ee      	beq.n	8002722 <HAL_nRF24L01P_Init+0x1e>
	
	/* ---- InitProcess ---- */
	retValue |= HAL_nRF24L01P_SetPRXWidth(nRF, nRF->PayloadWidth, nRF_DATA_PIPE_0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7a9b      	ldrb	r3, [r3, #10]
 8002748:	2200      	movs	r2, #0
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f9c1 	bl	8002ad4 <HAL_nRF24L01P_SetPRXWidth>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	4313      	orrs	r3, r2
 800275a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPRXAddress(nRF, nRF->RX_Address, nRF_DATA_PIPE_0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2200      	movs	r2, #0
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fa13 	bl	8002b90 <HAL_nRF24L01P_SetPRXAddress>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4313      	orrs	r3, r2
 8002772:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPTXAddress(nRF, nRF->TX_Address);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f9f0 	bl	8002b60 <HAL_nRF24L01P_SetPTXAddress>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	4313      	orrs	r3, r2
 8002788:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_RXDataReadyIRQ(nRF, nRF_ENABLE);
 800278a:	2101      	movs	r1, #1
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fb85 	bl	8002e9c <HAL_nRF24L01P_RXDataReadyIRQ>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	4313      	orrs	r3, r2
 800279a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_TXDataSentIRQ(nRF, nRF_ENABLE);
 800279c:	2101      	movs	r1, #1
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb4b 	bl	8002e3a <HAL_nRF24L01P_TXDataSentIRQ>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_MaxReTransmitIRQ(nRF, nRF_ENABLE);
 80027ae:	2101      	movs	r1, #1
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fb11 	bl	8002dd8 <HAL_nRF24L01P_MaxReTransmitIRQ>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	4313      	orrs	r3, r2
 80027be:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_CRC(nRF, nRF_ENABLE);
 80027c0:	2101      	movs	r1, #1
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fc34 	bl	8003030 <HAL_nRF24L01P_CRC>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetCRCWidth(nRF, nRF->CRC_Width);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fbf8 	bl	8002fce <HAL_nRF24L01P_SetCRCWidth>
 80027de:	4603      	mov	r3, r0
 80027e0:	461a      	mov	r2, r3
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetAddressWidth(nRF, nRF->ADDR_Width);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	795b      	ldrb	r3, [r3, #5]
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fcd9 	bl	80031a6 <HAL_nRF24L01P_SetAddressWidth>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRFChannel(nRF, nRF->RF_Channel);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7a5b      	ldrb	r3, [r3, #9]
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fd65 	bl	80032d4 <HAL_nRF24L01P_SetRFChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	4313      	orrs	r3, r2
 8002812:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetDataRate(nRF, nRF->Data_Rate);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	799b      	ldrb	r3, [r3, #6]
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fd9b 	bl	8003356 <HAL_nRF24L01P_SetDataRate>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	4313      	orrs	r3, r2
 8002828:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionCount(nRF, nRF->RetransmitCount);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7adb      	ldrb	r3, [r3, #11]
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fd1e 	bl	8003272 <HAL_nRF24L01P_SetRetransmissionCount>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	4313      	orrs	r3, r2
 800283e:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionDelay(nRF, nRF->RetransmitDelay);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7b1b      	ldrb	r3, [r3, #12]
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fcde 	bl	8003208 <HAL_nRF24L01P_SetRetransmissionDelay>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	4313      	orrs	r3, r2
 8002854:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_DynACK(nRF, nRF_DISABLE);
 8002856:	2100      	movs	r1, #0
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fa8c 	bl	8002d76 <HAL_nRF24L01P_DynACK>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	4313      	orrs	r3, r2
 8002866:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_ACKPayload(nRF, nRF_DISABLE);
 8002868:	2100      	movs	r1, #0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa52 	bl	8002d14 <HAL_nRF24L01P_ACKPayload>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	4313      	orrs	r3, r2
 8002878:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DynPayload(nRF, nRF_DISABLE);
 800287a:	2100      	movs	r1, #0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fa18 	bl	8002cb2 <HAL_nRF24L01P_DynPayload>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	4313      	orrs	r3, r2
 800288a:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_RXPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 800288c:	2201      	movs	r2, #1
 800288e:	2100      	movs	r1, #0
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fc43 	bl	800311c <HAL_nRF24L01P_RXPipe>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	4313      	orrs	r3, r2
 800289e:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DPLPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 80028a0:	2201      	movs	r2, #1
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f9c3 	bl	8002c30 <HAL_nRF24L01P_DPLPipe>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 80028b4:	2201      	movs	r2, #1
 80028b6:	2100      	movs	r1, #0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fbea 	bl	8003092 <HAL_nRF24L01P_AutoACK>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_1, nRF_DISABLE);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2101      	movs	r1, #1
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fbe0 	bl	8003092 <HAL_nRF24L01P_AutoACK>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	4313      	orrs	r3, r2
 80028da:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_2, nRF_DISABLE);
 80028dc:	2200      	movs	r2, #0
 80028de:	2102      	movs	r1, #2
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fbd6 	bl	8003092 <HAL_nRF24L01P_AutoACK>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_3, nRF_DISABLE);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2103      	movs	r1, #3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fbcc 	bl	8003092 <HAL_nRF24L01P_AutoACK>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	4313      	orrs	r3, r2
 8002902:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_4, nRF_DISABLE);
 8002904:	2200      	movs	r2, #0
 8002906:	2104      	movs	r1, #4
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fbc2 	bl	8003092 <HAL_nRF24L01P_AutoACK>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	4313      	orrs	r3, r2
 8002916:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_5, nRF_DISABLE);
 8002918:	2200      	movs	r2, #0
 800291a:	2105      	movs	r1, #5
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fbb8 	bl	8003092 <HAL_nRF24L01P_AutoACK>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	4313      	orrs	r3, r2
 800292a:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_ClearInterrupts(nRF);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fcec 	bl	800330a <HAL_nRF24L01P_ClearInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4313      	orrs	r3, r2
 800293a:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 800293c:	2101      	movs	r1, #1
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fadd 	bl	8002efe <HAL_nRF24L01P_TXRX>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	4313      	orrs	r3, r2
 800294c:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_FlushRX(nRF);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fd6a 	bl	8003428 <HAL_nRF24L01P_FlushRX>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	4313      	orrs	r3, r2
 800295c:	73fb      	strb	r3, [r7, #15]
	
	if(retValue != HAL_OK)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_nRF24L01P_Init+0x264>
	{
		return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_nRF24L01P_Init+0x266>
	}

	return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_nRF24L01P_IRQ_Handler>:

HAL_StatusTypeDef HAL_nRF24L01P_IRQ_Handler(nRF24L01P *nRF)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regStatus;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regStatus) != HAL_OK)
 800297a:	f107 030f 	add.w	r3, r7, #15
 800297e:	461a      	mov	r2, r3
 8002980:	2107      	movs	r1, #7
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fe1a 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_nRF24L01P_IRQ_Handler+0x20>
	{
		return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e074      	b.n	8002a7c <HAL_nRF24L01P_IRQ_Handler+0x10a>
	}	
	/* ---- RX FIFO Int.---- */
	if((regStatus & (1 << 6)) != 0)
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d027      	beq.n	80029ec <HAL_nRF24L01P_IRQ_Handler+0x7a>
	{
		uint8_t regFIFO_Status;
		HAL_nRF24L01P_CE_Low(nRF);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 ff15 	bl	80037cc <HAL_nRF24L01P_CE_Low>
		do {
		HAL_nRF24L01P_ReadRXPayload(nRF, nRF->RX_Buffer);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fd57 	bl	800345c <HAL_nRF24L01P_ReadRXPayload>
		regStatus |= (1 << 6);
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 80029b8:	f107 030f 	add.w	r3, r7, #15
 80029bc:	461a      	mov	r2, r3
 80029be:	2107      	movs	r1, #7
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fddd 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_ReadRegister(nRF, nRF_FIFO_STATUS, &regFIFO_Status);
 80029c6:	f107 030e 	add.w	r3, r7, #14
 80029ca:	461a      	mov	r2, r3
 80029cc:	2117      	movs	r1, #23
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fdf4 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
		} while((regFIFO_Status & 0x01) == 0x00);
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0e1      	beq.n	80029a2 <HAL_nRF24L01P_IRQ_Handler+0x30>
		HAL_nRF24L01P_CE_High(nRF);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fee4 	bl	80037ac <HAL_nRF24L01P_CE_High>
		nRF->RXIRQ = 1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	}
	/* ---- TX Sent Int.---- */
	if((regStatus & (1 << 5)) != 0)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01c      	beq.n	8002a30 <HAL_nRF24L01P_IRQ_Handler+0xbe>
	{
		HAL_nRF24L01P_CE_Low(nRF);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fee8 	bl	80037cc <HAL_nRF24L01P_CE_Low>
		regStatus |= (1 << 5);
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8002a06:	2101      	movs	r1, #1
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fa78 	bl	8002efe <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8002a0e:	f107 030f 	add.w	r3, r7, #15
 8002a12:	461a      	mov	r2, r3
 8002a14:	2107      	movs	r1, #7
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fdb2 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fec5 	bl	80037ac <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	761a      	strb	r2, [r3, #24]
		nRF->TXIRQ = 1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	}
	/* ---- MAXReTX Int.---- */
	if((regStatus & (1 << 4)) != 0)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01f      	beq.n	8002a7a <HAL_nRF24L01P_IRQ_Handler+0x108>
	{
		regStatus |= (1 << 4);
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	f043 0310 	orr.w	r3, r3, #16
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	73fb      	strb	r3, [r7, #15]
		
		HAL_nRF24L01P_FlushTX(nRF);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fcd5 	bl	80033f4 <HAL_nRF24L01P_FlushTX>
		//HAL_nRF24L01P_PowerUP(nRF, nRF_DISABLE);	// bi kapatip açalim da düzelsin...
		//HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE);
		
		HAL_nRF24L01P_CE_Low(nRF);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 febe 	bl	80037cc <HAL_nRF24L01P_CE_Low>
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8002a50:	2101      	movs	r1, #1
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa53 	bl	8002efe <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8002a58:	f107 030f 	add.w	r3, r7, #15
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2107      	movs	r1, #7
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fd8d 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fea0 	bl	80037ac <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	761a      	strb	r2, [r3, #24]
		nRF->MaxReIRQ = 1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_nRF24L01P_TransmitPacketACK>:

	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_TransmitPacketACK(nRF24L01P *nRF, uint8_t *Data, nRF_DATA_PIPE Pipe)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	71fb      	strb	r3, [r7, #7]
	nRF->Busy = 1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	761a      	strb	r2, [r3, #24]

	HAL_nRF24L01P_CE_Low(nRF);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fe97 	bl	80037cc <HAL_nRF24L01P_CE_Low>
	HAL_nRF24L01P_TXRX(nRF, nRF_STATE_TX);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fa2c 	bl	8002efe <HAL_nRF24L01P_TXRX>
	HAL_nRF24L01P_WriteTXPayloadACK(nRF, Data, Pipe);
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fd1a 	bl	80034e6 <HAL_nRF24L01P_WriteTXPayloadACK>
	HAL_nRF24L01P_CE_High(nRF);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fe7a 	bl	80037ac <HAL_nRF24L01P_CE_High>

	//while(nRF->Busy);	// TODO: Add *timeout* functionality
	while(nRF->Busy)
 8002ab8:	e002      	b.n	8002ac0 <HAL_nRF24L01P_TransmitPacketACK+0x3c>
		DWT_Delay(10);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f7fe fec4 	bl	8001848 <DWT_Delay>
	while(nRF->Busy)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f8      	bne.n	8002aba <HAL_nRF24L01P_TransmitPacketACK+0x36>

	return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_nRF24L01P_SetPRXWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXWidth(nRF24L01P *nRF, nRF_PRX_WIDTH Width, nRF_DATA_PIPE Pipe)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regAddr, regData;
	regData = Width & 0x3F;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	73bb      	strb	r3, [r7, #14]
	/* ---- Pre Process ---- */
	switch(Pipe)
 8002aee:	78bb      	ldrb	r3, [r7, #2]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d821      	bhi.n	8002b38 <HAL_nRF24L01P_SetPRXWidth+0x64>
 8002af4:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <HAL_nRF24L01P_SetPRXWidth+0x28>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b1b 	.word	0x08002b1b
 8002b04:	08002b21 	.word	0x08002b21
 8002b08:	08002b27 	.word	0x08002b27
 8002b0c:	08002b2d 	.word	0x08002b2d
 8002b10:	08002b33 	.word	0x08002b33
	{
		case 0: //P0
			regAddr = nRF_RX_PW_P0;
 8002b14:	2311      	movs	r3, #17
 8002b16:	73fb      	strb	r3, [r7, #15]
		break;
 8002b18:	e010      	b.n	8002b3c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 1: //P1
			regAddr = nRF_RX_PW_P1;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	73fb      	strb	r3, [r7, #15]
		break;
 8002b1e:	e00d      	b.n	8002b3c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 2: //P2
			regAddr = nRF_RX_PW_P2;
 8002b20:	2313      	movs	r3, #19
 8002b22:	73fb      	strb	r3, [r7, #15]
		break;
 8002b24:	e00a      	b.n	8002b3c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 3: //P3
			regAddr = nRF_RX_PW_P3;
 8002b26:	2314      	movs	r3, #20
 8002b28:	73fb      	strb	r3, [r7, #15]
		break;
 8002b2a:	e007      	b.n	8002b3c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 4: //P4
			regAddr = nRF_RX_PW_P4;
 8002b2c:	2315      	movs	r3, #21
 8002b2e:	73fb      	strb	r3, [r7, #15]
		break;
 8002b30:	e004      	b.n	8002b3c <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 5: //P5
			regAddr = nRF_RX_PW_P5;
 8002b32:	2316      	movs	r3, #22
 8002b34:	73fb      	strb	r3, [r7, #15]
		break;
 8002b36:	e001      	b.n	8002b3c <HAL_nRF24L01P_SetPRXWidth+0x68>
		default:
			return HAL_ERROR;		
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e00c      	b.n	8002b56 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, regAddr, &regData)  != HAL_OK)
 8002b3c:	f107 020e 	add.w	r2, r7, #14
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fd1b 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_nRF24L01P_SetPRXWidth+0x80>
	{
		return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop

08002b60 <HAL_nRF24L01P_SetPTXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPTXAddress(nRF24L01P *nRF, uint8_t *pRegData)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + nRF_TX_ADDR, pRegData, Zero, 5) != HAL_OK)
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	2205      	movs	r2, #5
 8002b70:	9200      	str	r2, [sp, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	2130      	movs	r1, #48	@ 0x30
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fd3c 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_nRF24L01P_SetPTXAddress+0x26>
	{
		return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_nRF24L01P_SetPTXAddress+0x28>
	}
	return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_nRF24L01P_SetPRXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXAddress(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	71fb      	strb	r3, [r7, #7]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	uint8_t Size;
	uint8_t regAddr;
	/* ---- Pre Process ---- */
	switch(Pipe)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b05      	cmp	r3, #5
 8002ba2:	d82d      	bhi.n	8002c00 <HAL_nRF24L01P_SetPRXAddress+0x70>
 8002ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <HAL_nRF24L01P_SetPRXAddress+0x1c>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bc5 	.word	0x08002bc5
 8002bb0:	08002bcf 	.word	0x08002bcf
 8002bb4:	08002bd9 	.word	0x08002bd9
 8002bb8:	08002be3 	.word	0x08002be3
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002bf7 	.word	0x08002bf7
	{
		case 0: //P0
			Size = 5;
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P0;
 8002bc8:	230a      	movs	r3, #10
 8002bca:	75bb      	strb	r3, [r7, #22]
		break;
 8002bcc:	e01a      	b.n	8002c04 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 1: //P1
			Size = 5;
 8002bce:	2305      	movs	r3, #5
 8002bd0:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P1;
 8002bd2:	230b      	movs	r3, #11
 8002bd4:	75bb      	strb	r3, [r7, #22]
		break;
 8002bd6:	e015      	b.n	8002c04 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 2: //P2
			Size = 1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P2;
 8002bdc:	230c      	movs	r3, #12
 8002bde:	75bb      	strb	r3, [r7, #22]
		break;
 8002be0:	e010      	b.n	8002c04 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 3: //P3
			Size = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P3;
 8002be6:	230d      	movs	r3, #13
 8002be8:	75bb      	strb	r3, [r7, #22]
		break;
 8002bea:	e00b      	b.n	8002c04 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 4: //P4
			Size = 1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P4;
 8002bf0:	230e      	movs	r3, #14
 8002bf2:	75bb      	strb	r3, [r7, #22]
		break;
 8002bf4:	e006      	b.n	8002c04 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 5: //P5
			Size = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P5;
 8002bfa:	230f      	movs	r3, #15
 8002bfc:	75bb      	strb	r3, [r7, #22]
		break;
 8002bfe:	e001      	b.n	8002c04 <HAL_nRF24L01P_SetPRXAddress+0x74>
		default:
			return HAL_ERROR;		
 8002c00:	2301      	movs	r3, #1
 8002c02:	e011      	b.n	8002c28 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, Zero, Size) != HAL_OK)
 8002c04:	7dbb      	ldrb	r3, [r7, #22]
 8002c06:	3320      	adds	r3, #32
 8002c08:	b2d9      	uxtb	r1, r3
 8002c0a:	f107 0210 	add.w	r2, r7, #16
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fcec 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_nRF24L01P_SetPRXAddress+0x96>
	{
		return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_nRF24L01P_DPLPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_DPLPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE DPL_State)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	70bb      	strb	r3, [r7, #2]
		/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8002c40:	f107 030f 	add.w	r3, r7, #15
 8002c44:	461a      	mov	r2, r3
 8002c46:	211c      	movs	r1, #28
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fcb7 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_nRF24L01P_DPLPipe+0x28>
	{
		return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e028      	b.n	8002caa <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	
	if(DPL_State)
 8002c58:	78bb      	ldrb	r3, [r7, #2]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_nRF24L01P_DPLPipe+0x46>
	{
		regValue |= (1 << Pipe);
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	2201      	movs	r2, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	b25a      	sxtb	r2, r3
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e00c      	b.n	8002c90 <HAL_nRF24L01P_DPLPipe+0x60>
	} else {
		regValue &= ~(1 << Pipe);
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	b25a      	sxtb	r2, r3
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	b25b      	sxtb	r3, r3
 8002c88:	4013      	ands	r3, r2
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8002c90:	f107 030f 	add.w	r3, r7, #15
 8002c94:	461a      	mov	r2, r3
 8002c96:	211c      	movs	r1, #28
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fc71 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_nRF24L01P_DPLPipe+0x78>
	{
		return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_nRF24L01P_DynPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_DynPayload(nRF24L01P *nRF, nRF_STATE DPL_State)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8002cbe:	f107 030f 	add.w	r3, r7, #15
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	211d      	movs	r1, #29
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fc78 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_nRF24L01P_DynPayload+0x24>
	{
		return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e01a      	b.n	8002d0c <HAL_nRF24L01P_DynPayload+0x5a>
	}
	
	if(DPL_State)
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_nRF24L01P_DynPayload+0x36>
	{
		regValue |= (1 << 2);
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e004      	b.n	8002cf2 <HAL_nRF24L01P_DynPayload+0x40>
	} else {
		regValue &= ~(1 << 2);
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8002cf2:	f107 030f 	add.w	r3, r7, #15
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	211d      	movs	r1, #29
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fc40 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_nRF24L01P_DynPayload+0x58>
	{
		return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_nRF24L01P_DynPayload+0x5a>
	}
	return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_nRF24L01P_ACKPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ACKPayload(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8002d20:	f107 030f 	add.w	r3, r7, #15
 8002d24:	461a      	mov	r2, r3
 8002d26:	211d      	movs	r1, #29
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fc47 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_nRF24L01P_ACKPayload+0x24>
	{
		return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e01a      	b.n	8002d6e <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	
	if(ACK_State)
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_nRF24L01P_ACKPayload+0x36>
	{
		regValue |= (1 << 1);
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e004      	b.n	8002d54 <HAL_nRF24L01P_ACKPayload+0x40>
	} else {
		regValue &= ~(1 << 1);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	f023 0302 	bic.w	r3, r3, #2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8002d54:	f107 030f 	add.w	r3, r7, #15
 8002d58:	461a      	mov	r2, r3
 8002d5a:	211d      	movs	r1, #29
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fc0f 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_nRF24L01P_ACKPayload+0x58>
	{
		return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_nRF24L01P_DynACK>:

HAL_StatusTypeDef HAL_nRF24L01P_DynACK(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8002d82:	f107 030f 	add.w	r3, r7, #15
 8002d86:	461a      	mov	r2, r3
 8002d88:	211d      	movs	r1, #29
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fc16 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_nRF24L01P_DynACK+0x24>
	{
		return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e01a      	b.n	8002dd0 <HAL_nRF24L01P_DynACK+0x5a>
	}
	
	if(ACK_State)
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_nRF24L01P_DynACK+0x36>
	{
		regValue |= (1 << 0);
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	e004      	b.n	8002db6 <HAL_nRF24L01P_DynACK+0x40>
	} else {
		regValue &= ~(1 << 0);
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8002db6:	f107 030f 	add.w	r3, r7, #15
 8002dba:	461a      	mov	r2, r3
 8002dbc:	211d      	movs	r1, #29
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fbde 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_nRF24L01P_DynACK+0x58>
	{
		return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_nRF24L01P_DynACK+0x5a>
	}
	return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_nRF24L01P_MaxReTransmitIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_MaxReTransmitIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002de4:	f107 030f 	add.w	r3, r7, #15
 8002de8:	461a      	mov	r2, r3
 8002dea:	2100      	movs	r1, #0
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fbe5 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_nRF24L01P_MaxReTransmitIRQ+0x24>
	{
		return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e01a      	b.n	8002e32 <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	
	if(IRQ_State)
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_nRF24L01P_MaxReTransmitIRQ+0x36>
	{
		regValue &= ~(1 << 4);
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	f023 0310 	bic.w	r3, r3, #16
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e004      	b.n	8002e18 <HAL_nRF24L01P_MaxReTransmitIRQ+0x40>
	} else {
		regValue |= (1 << 4);
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002e18:	f107 030f 	add.w	r3, r7, #15
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fbad 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_nRF24L01P_MaxReTransmitIRQ+0x58>
	{
		return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_nRF24L01P_TXDataSentIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_TXDataSentIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002e46:	f107 030f 	add.w	r3, r7, #15
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fbb4 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_nRF24L01P_TXDataSentIRQ+0x24>
	{
		return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01a      	b.n	8002e94 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	
	if(IRQ_State)
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_nRF24L01P_TXDataSentIRQ+0x36>
	{
		regValue &= ~(1 << 5);
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	f023 0320 	bic.w	r3, r3, #32
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e004      	b.n	8002e7a <HAL_nRF24L01P_TXDataSentIRQ+0x40>
	} else {
		regValue |= (1 << 5);
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	f043 0320 	orr.w	r3, r3, #32
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002e7a:	f107 030f 	add.w	r3, r7, #15
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2100      	movs	r1, #0
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fb7c 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_nRF24L01P_TXDataSentIRQ+0x58>
	{
		return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_nRF24L01P_RXDataReadyIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_RXDataReadyIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002ea8:	f107 030f 	add.w	r3, r7, #15
 8002eac:	461a      	mov	r2, r3
 8002eae:	2100      	movs	r1, #0
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb83 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_nRF24L01P_RXDataReadyIRQ+0x24>
	{
		return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e01a      	b.n	8002ef6 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	
	if(IRQ_State)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_nRF24L01P_RXDataReadyIRQ+0x36>
	{
		regValue &= ~(1 << 6);
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e004      	b.n	8002edc <HAL_nRF24L01P_RXDataReadyIRQ+0x40>
	} else {
		regValue |= (1 << 6);
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002edc:	f107 030f 	add.w	r3, r7, #15
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb4b 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_nRF24L01P_RXDataReadyIRQ+0x58>
	{
		return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_nRF24L01P_TXRX>:

HAL_StatusTypeDef HAL_nRF24L01P_TXRX(nRF24L01P *nRF, nRF_TXRX_STATE TxRx_State)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002f0a:	f107 030f 	add.w	r3, r7, #15
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2100      	movs	r1, #0
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fb52 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_nRF24L01P_TXRX+0x24>
	{
		return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e020      	b.n	8002f64 <HAL_nRF24L01P_TXRX+0x66>
	}
	
	if(TxRx_State)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_nRF24L01P_TXRX+0x3c>
	{
		regValue |= (1);
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_TX;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	721a      	strb	r2, [r3, #8]
 8002f38:	e007      	b.n	8002f4a <HAL_nRF24L01P_TXRX+0x4c>
	} else {
		regValue &= ~(1);
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_RX;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	721a      	strb	r2, [r3, #8]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002f4a:	f107 030f 	add.w	r3, r7, #15
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2100      	movs	r1, #0
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb14 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_nRF24L01P_TXRX+0x64>
	{
		return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_nRF24L01P_TXRX+0x66>
	}
	return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_nRF24L01P_PowerUP>:

HAL_StatusTypeDef HAL_nRF24L01P_PowerUP(nRF24L01P *nRF, nRF_STATE Power)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002f78:	f107 030f 	add.w	r3, r7, #15
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2100      	movs	r1, #0
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb1b 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_nRF24L01P_PowerUP+0x24>
	{
		return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e01a      	b.n	8002fc6 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	
	if(Power)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_nRF24L01P_PowerUP+0x36>
	{
		regValue |= (1 << 1);
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e004      	b.n	8002fac <HAL_nRF24L01P_PowerUP+0x40>
	} else {
		regValue &= ~(1 << 1);
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	f023 0302 	bic.w	r3, r3, #2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002fac:	f107 030f 	add.w	r3, r7, #15
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fae3 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_nRF24L01P_PowerUP+0x58>
	{
		return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_nRF24L01P_SetCRCWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetCRCWidth(nRF24L01P *nRF, nRF_CRC_WIDTH CRC_Width)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8002fda:	f107 030f 	add.w	r3, r7, #15
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 faea 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_nRF24L01P_SetCRCWidth+0x24>
	{
		return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e01a      	b.n	8003028 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	
	if(CRC_Width)
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_nRF24L01P_SetCRCWidth+0x36>
	{
		regValue |= (1 << 2);
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	e004      	b.n	800300e <HAL_nRF24L01P_SetCRCWidth+0x40>
	} else {
		regValue &= ~(1 << 2);
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	f023 0304 	bic.w	r3, r3, #4
 800300a:	b2db      	uxtb	r3, r3
 800300c:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800300e:	f107 030f 	add.w	r3, r7, #15
 8003012:	461a      	mov	r2, r3
 8003014:	2100      	movs	r1, #0
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fab2 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_nRF24L01P_SetCRCWidth+0x58>
	{
		return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_nRF24L01P_CRC>:

HAL_StatusTypeDef HAL_nRF24L01P_CRC(nRF24L01P *nRF, nRF_STATE CRC_State)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800303c:	f107 030f 	add.w	r3, r7, #15
 8003040:	461a      	mov	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fab9 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_nRF24L01P_CRC+0x24>
	{
		return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e01a      	b.n	800308a <HAL_nRF24L01P_CRC+0x5a>
	}
	
	if(CRC_State)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_nRF24L01P_CRC+0x36>
	{
		regValue |= (1 << 3);
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	b2db      	uxtb	r3, r3
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e004      	b.n	8003070 <HAL_nRF24L01P_CRC+0x40>
	} else {
		regValue &= ~(1 << 3);
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	f023 0308 	bic.w	r3, r3, #8
 800306c:	b2db      	uxtb	r3, r3
 800306e:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8003070:	f107 030f 	add.w	r3, r7, #15
 8003074:	461a      	mov	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fa81 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_nRF24L01P_CRC+0x58>
	{
		return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_nRF24L01P_CRC+0x5a>
	}
	return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_nRF24L01P_AutoACK>:

HAL_StatusTypeDef HAL_nRF24L01P_AutoACK(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE ACK_State)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
 800309e:	4613      	mov	r3, r2
 80030a0:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 80030a2:	f107 030f 	add.w	r3, r7, #15
 80030a6:	461a      	mov	r2, r3
 80030a8:	2101      	movs	r1, #1
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa86 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_nRF24L01P_AutoACK+0x28>
	{
		return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e02c      	b.n	8003114 <HAL_nRF24L01P_AutoACK+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_AA reg's 6. and 7. bits are Reserved
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c0:	70fb      	strb	r3, [r7, #3]
	if(ACK_State)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <HAL_nRF24L01P_AutoACK+0x4e>
	{
		regValue |= (1 << Pipe); //nRF_EN_AA reg is Configured
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	2201      	movs	r2, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	4313      	orrs	r3, r2
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e00c      	b.n	80030fa <HAL_nRF24L01P_AutoACK+0x68>
	} else {
		regValue &= ~(1 << Pipe); //nRF_EN_AA reg is Configured		
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	b25a      	sxtb	r2, r3
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	4013      	ands	r3, r2
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 80030fa:	f107 030f 	add.w	r3, r7, #15
 80030fe:	461a      	mov	r2, r3
 8003100:	2101      	movs	r1, #1
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa3c 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_nRF24L01P_AutoACK+0x80>
	{
		return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_nRF24L01P_AutoACK+0x82>
	}
	return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_nRF24L01P_RXPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_RXPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE Pipe_State)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
 8003128:	4613      	mov	r3, r2
 800312a:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 800312c:	f107 030f 	add.w	r3, r7, #15
 8003130:	461a      	mov	r2, r3
 8003132:	2102      	movs	r1, #2
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa41 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_nRF24L01P_RXPipe+0x28>
	{
		return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e02c      	b.n	800319e <HAL_nRF24L01P_RXPipe+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_RXADDR reg's 7. bit is Reserved
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800314a:	70fb      	strb	r3, [r7, #3]
	if(Pipe_State)
 800314c:	78bb      	ldrb	r3, [r7, #2]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_nRF24L01P_RXPipe+0x4e>
	{
		regValue |= (1 << Pipe);
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	2201      	movs	r2, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	b25a      	sxtb	r2, r3
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	b25b      	sxtb	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b25b      	sxtb	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e00c      	b.n	8003184 <HAL_nRF24L01P_RXPipe+0x68>
	} else {
		regValue &= ~(1 << Pipe);
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	2201      	movs	r2, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	b25b      	sxtb	r3, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	b25a      	sxtb	r2, r3
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	b25b      	sxtb	r3, r3
 800317c:	4013      	ands	r3, r2
 800317e:	b25b      	sxtb	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	73fb      	strb	r3, [r7, #15]
	} //nRF_EN_RXADDR reg is Configured
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 8003184:	f107 030f 	add.w	r3, r7, #15
 8003188:	461a      	mov	r2, r3
 800318a:	2102      	movs	r1, #2
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9f7 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_nRF24L01P_RXPipe+0x80>
	{
		return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_nRF24L01P_RXPipe+0x82>
	}
	return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_nRF24L01P_SetAddressWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetAddressWidth(nRF24L01P *nRF, nRF_ADDR_WIDTH AddrWidth)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 80031b2:	f107 030f 	add.w	r3, r7, #15
 80031b6:	461a      	mov	r2, r3
 80031b8:	2103      	movs	r1, #3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9fe 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_nRF24L01P_SetAddressWidth+0x24>
	{
		return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e01a      	b.n	8003200 <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	
	AddrWidth &= (0x03);
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xFC); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Cleared
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	73fb      	strb	r3, [r7, #15]
	regValue |= (AddrWidth); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Configured
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 80031e6:	f107 030f 	add.w	r3, r7, #15
 80031ea:	461a      	mov	r2, r3
 80031ec:	2103      	movs	r1, #3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f9c6 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_nRF24L01P_SetAddressWidth+0x58>
	{
		return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_nRF24L01P_SetRetransmissionDelay>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionDelay(nRF24L01P *nRF, nRF_RETX_DELAY Delay)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8003214:	f107 030f 	add.w	r3, r7, #15
 8003218:	461a      	mov	r2, r3
 800321a:	2104      	movs	r1, #4
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9cd 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_nRF24L01P_SetRetransmissionDelay+0x24>
	{
		return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e01e      	b.n	800326a <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	
	Delay &= (0x0F);
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	70fb      	strb	r3, [r7, #3]
	regValue &= (0x0F); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Cleared
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	b2db      	uxtb	r3, r3
 800323c:	73fb      	strb	r3, [r7, #15]
	regValue |= (Delay << 4); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Configured
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	b25a      	sxtb	r2, r3
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	b25b      	sxtb	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b25b      	sxtb	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8003250:	f107 030f 	add.w	r3, r7, #15
 8003254:	461a      	mov	r2, r3
 8003256:	2104      	movs	r1, #4
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f991 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_nRF24L01P_SetRetransmissionDelay+0x60>
	{
		return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_nRF24L01P_SetRetransmissionCount>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionCount(nRF24L01P *nRF, nRF_RETX_COUNT Count)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 800327e:	f107 030f 	add.w	r3, r7, #15
 8003282:	461a      	mov	r2, r3
 8003284:	2104      	movs	r1, #4
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f998 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_nRF24L01P_SetRetransmissionCount+0x24>
	{
		return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e01a      	b.n	80032cc <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	
	Count &= (0x0F);
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xF0); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Cleared
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	f023 030f 	bic.w	r3, r3, #15
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	73fb      	strb	r3, [r7, #15]
	regValue |= (Count); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Configured
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 80032b2:	f107 030f 	add.w	r3, r7, #15
 80032b6:	461a      	mov	r2, r3
 80032b8:	2104      	movs	r1, #4
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f960 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_nRF24L01P_SetRetransmissionCount+0x58>
	{
		return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_nRF24L01P_SetRFChannel>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRFChannel(nRF24L01P *nRF, uint8_t Channel)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
	/* ---- Pre Process ---- */
	Channel &= 0x7F;	// nRF_RF_CH 7. bit is RESERVED
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	70fb      	strb	r3, [r7, #3]
										// Freq. = (2400 + "Channel" Value) MHz 
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_CH, &Channel) != HAL_OK)
 80032ea:	1cfb      	adds	r3, r7, #3
 80032ec:	461a      	mov	r2, r3
 80032ee:	2105      	movs	r1, #5
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f945 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_nRF24L01P_SetRFChannel+0x2c>
	{
		return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_nRF24L01P_SetRFChannel+0x2e>
	}
	return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_nRF24L01P_ClearInterrupts>:

HAL_StatusTypeDef HAL_nRF24L01P_ClearInterrupts(nRF24L01P *nRF)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8003312:	f107 030f 	add.w	r3, r7, #15
 8003316:	461a      	mov	r2, r3
 8003318:	2107      	movs	r1, #7
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f94e 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_nRF24L01P_ClearInterrupts+0x20>
	{
		return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e011      	b.n	800334e <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	
	regValue |= (0x07 << 4); //nRF_STATUS reg's 4.,5. and 6. bits are RESET
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003330:	b2db      	uxtb	r3, r3
 8003332:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8003334:	f107 030f 	add.w	r3, r7, #15
 8003338:	461a      	mov	r2, r3
 800333a:	2107      	movs	r1, #7
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f91f 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_nRF24L01P_ClearInterrupts+0x42>
	{
		return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_nRF24L01P_SetDataRate>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetDataRate(nRF24L01P *nRF, nRF_DATA_RATE Rate)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 8003362:	f107 030f 	add.w	r3, r7, #15
 8003366:	461a      	mov	r2, r3
 8003368:	2106      	movs	r1, #6
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f926 	bl	80035bc <HAL_nRF24L01P_ReadRegister>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_nRF24L01P_SetDataRate+0x24>
	{
		return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e038      	b.n	80033ec <HAL_nRF24L01P_SetDataRate+0x96>
	}
	switch(Rate)
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d01b      	beq.n	80033b8 <HAL_nRF24L01P_SetDataRate+0x62>
 8003380:	2b02      	cmp	r3, #2
 8003382:	dc24      	bgt.n	80033ce <HAL_nRF24L01P_SetDataRate+0x78>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <HAL_nRF24L01P_SetDataRate+0x4c>
 8003388:	2b01      	cmp	r3, #1
 800338a:	d120      	bne.n	80033ce <HAL_nRF24L01P_SetDataRate+0x78>
	{
		case nRF_DATA_RATE_250KBPS:
			regValue |=  (0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is SET
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	f043 0320 	orr.w	r3, r3, #32
 8003392:	b2db      	uxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	f023 0308 	bic.w	r3, r3, #8
 800339c:	b2db      	uxtb	r3, r3
 800339e:	73fb      	strb	r3, [r7, #15]
		break;
 80033a0:	e017      	b.n	80033d2 <HAL_nRF24L01P_SetDataRate+0x7c>
		case nRF_DATA_RATE_1MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	f023 0320 	bic.w	r3, r3, #32
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	f023 0308 	bic.w	r3, r3, #8
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	73fb      	strb	r3, [r7, #15]
		break;
 80033b6:	e00c      	b.n	80033d2 <HAL_nRF24L01P_SetDataRate+0x7c>
		case nRF_DATA_RATE_2MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	f023 0320 	bic.w	r3, r3, #32
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	73fb      	strb	r3, [r7, #15]
			regValue |=  (0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is SET
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	f043 0308 	orr.w	r3, r3, #8
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	73fb      	strb	r3, [r7, #15]
		break;
 80033cc:	e001      	b.n	80033d2 <HAL_nRF24L01P_SetDataRate+0x7c>
		default:
			return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00c      	b.n	80033ec <HAL_nRF24L01P_SetDataRate+0x96>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 80033d2:	f107 030f 	add.w	r3, r7, #15
 80033d6:	461a      	mov	r2, r3
 80033d8:	2106      	movs	r1, #6
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8d0 	bl	8003580 <HAL_nRF24L01P_WriteRegister>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_nRF24L01P_SetDataRate+0x94>
	{
		return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_nRF24L01P_SetDataRate+0x96>
	}
	return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_nRF24L01P_FlushTX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushTX(nRF24L01P *nRF)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_TX, &Zero, &Zero, 0) != HAL_OK)
 8003400:	f107 030f 	add.w	r3, r7, #15
 8003404:	f107 020f 	add.w	r2, r7, #15
 8003408:	2100      	movs	r1, #0
 800340a:	9100      	str	r1, [sp, #0]
 800340c:	21e1      	movs	r1, #225	@ 0xe1
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8f0 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_nRF24L01P_FlushTX+0x2a>
	{
		return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_nRF24L01P_FlushTX+0x2c>
	}
	return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_nRF24L01P_FlushRX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushRX(nRF24L01P *nRF)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_RX, &Zero, &Zero, 0) != HAL_OK)
 8003434:	f107 030f 	add.w	r3, r7, #15
 8003438:	f107 020f 	add.w	r2, r7, #15
 800343c:	2100      	movs	r1, #0
 800343e:	9100      	str	r1, [sp, #0]
 8003440:	21e2      	movs	r1, #226	@ 0xe2
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8d6 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_nRF24L01P_FlushRX+0x2a>
	{
		return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_nRF24L01P_FlushRX+0x2c>
	}
	return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_nRF24L01P_ReadRXPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRXPayload(nRF24L01P *nRF, uint8_t *pRegData)
{
 800345c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003460:	b087      	sub	sp, #28
 8003462:	af02      	add	r7, sp, #8
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
 8003468:	466b      	mov	r3, sp
 800346a:	461e      	mov	r6, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7a99      	ldrb	r1, [r3, #10]
 8003470:	460b      	mov	r3, r1
 8003472:	3b01      	subs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	b2cb      	uxtb	r3, r1
 8003478:	2200      	movs	r2, #0
 800347a:	4698      	mov	r8, r3
 800347c:	4691      	mov	r9, r2
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	b2cb      	uxtb	r3, r1
 8003494:	2200      	movs	r2, #0
 8003496:	461c      	mov	r4, r3
 8003498:	4615      	mov	r5, r2
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	00eb      	lsls	r3, r5, #3
 80034a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a8:	00e2      	lsls	r2, r4, #3
 80034aa:	460b      	mov	r3, r1
 80034ac:	3307      	adds	r3, #7
 80034ae:	08db      	lsrs	r3, r3, #3
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	ebad 0d03 	sub.w	sp, sp, r3
 80034b6:	ab02      	add	r3, sp, #8
 80034b8:	3300      	adds	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_RX_PAYLOAD, Zero, pRegData, nRF->PayloadWidth) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7a9b      	ldrb	r3, [r3, #10]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	2161      	movs	r1, #97	@ 0x61
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f893 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_nRF24L01P_ReadRXPayload+0x7c>
	{
		return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_nRF24L01P_ReadRXPayload+0x7e>
	}
	return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	46b5      	mov	sp, r6
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080034e6 <HAL_nRF24L01P_WriteTXPayloadACK>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_WriteTXPayloadACK(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 80034e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
 80034f6:	466b      	mov	r3, sp
 80034f8:	461e      	mov	r6, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	7a99      	ldrb	r1, [r3, #10]
 80034fe:	460b      	mov	r3, r1
 8003500:	3b01      	subs	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	b2cb      	uxtb	r3, r1
 8003506:	2200      	movs	r2, #0
 8003508:	4698      	mov	r8, r3
 800350a:	4691      	mov	r9, r2
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003518:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003520:	b2cb      	uxtb	r3, r1
 8003522:	2200      	movs	r2, #0
 8003524:	461c      	mov	r4, r3
 8003526:	4615      	mov	r5, r2
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	00eb      	lsls	r3, r5, #3
 8003532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003536:	00e2      	lsls	r2, r4, #3
 8003538:	460b      	mov	r3, r1
 800353a:	3307      	adds	r3, #7
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	ebad 0d03 	sub.w	sp, sp, r3
 8003544:	ab02      	add	r3, sp, #8
 8003546:	3300      	adds	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
	Pipe &= 0x07;
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	71fb      	strb	r3, [r7, #7]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_ACK_PAYLOAD + Pipe, pRegData, Zero, nRF->PayloadWidth) != HAL_OK)
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	3b58      	subs	r3, #88	@ 0x58
 8003556:	b2d9      	uxtb	r1, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	7a9b      	ldrb	r3, [r3, #10]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f846 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_nRF24L01P_WriteTXPayloadACK+0x8c>
	{
		return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_nRF24L01P_WriteTXPayloadACK+0x8e>
	}
	return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	46b5      	mov	sp, r6
}
 8003576:	4618      	mov	r0, r3
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003580 <HAL_nRF24L01P_WriteRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_WriteRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	460b      	mov	r3, r1
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, &Zero, 1) != HAL_OK)
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	3320      	adds	r3, #32
 8003596:	b2d9      	uxtb	r1, r3
 8003598:	f107 0317 	add.w	r3, r7, #23
 800359c:	2201      	movs	r2, #1
 800359e:	9200      	str	r2, [sp, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f826 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_nRF24L01P_WriteRegister+0x32>
	{
		return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_nRF24L01P_WriteRegister+0x34>
	}
	return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_nRF24L01P_ReadRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	460b      	mov	r3, r1
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_REGISTER + regAddr, &Zero, pRegData, 1) != HAL_OK)
 80035ce:	f107 0217 	add.w	r2, r7, #23
 80035d2:	7af9      	ldrb	r1, [r7, #11]
 80035d4:	2301      	movs	r3, #1
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f80a 	bl	80035f4 <HAL_nRF24L01P_SendCommand>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_nRF24L01P_ReadRegister+0x2e>
	{
		return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_nRF24L01P_ReadRegister+0x30>
	}
	return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_nRF24L01P_SendCommand>:

HAL_StatusTypeDef HAL_nRF24L01P_SendCommand(nRF24L01P *nRF, uint8_t Command, uint8_t *TxBuffer, uint8_t *RxBuffer, uint8_t Size)
{
 80035f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f8:	b08f      	sub	sp, #60	@ 0x3c
 80035fa:	af02      	add	r7, sp, #8
 80035fc:	6178      	str	r0, [r7, #20]
 80035fe:	60fa      	str	r2, [r7, #12]
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	460b      	mov	r3, r1
 8003604:	74fb      	strb	r3, [r7, #19]
 8003606:	466b      	mov	r3, sp
 8003608:	461e      	mov	r6, r3
	/* ---- Local Vars. ---- */
	uint8_t tempTxBuffer[Size + 1];
 800360a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800360e:	1c59      	adds	r1, r3, #1
 8003610:	1e4b      	subs	r3, r1, #1
 8003612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003614:	460a      	mov	r2, r1
 8003616:	2300      	movs	r3, #0
 8003618:	603a      	str	r2, [r7, #0]
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	00c3      	lsls	r3, r0, #3
 8003628:	6838      	ldr	r0, [r7, #0]
 800362a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800362e:	6838      	ldr	r0, [r7, #0]
 8003630:	00c2      	lsls	r2, r0, #3
 8003632:	460a      	mov	r2, r1
 8003634:	2300      	movs	r3, #0
 8003636:	4692      	mov	sl, r2
 8003638:	469b      	mov	fp, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003646:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800364a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800364e:	460b      	mov	r3, r1
 8003650:	3307      	adds	r3, #7
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	ebad 0d03 	sub.w	sp, sp, r3
 800365a:	ab02      	add	r3, sp, #8
 800365c:	3300      	adds	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t tempRxBuffer[Size + 1];
 8003660:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003664:	1c59      	adds	r1, r3, #1
 8003666:	1e4b      	subs	r3, r1, #1
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	460a      	mov	r2, r1
 800366c:	2300      	movs	r3, #0
 800366e:	4690      	mov	r8, r2
 8003670:	4699      	mov	r9, r3
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800367e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003686:	460a      	mov	r2, r1
 8003688:	2300      	movs	r3, #0
 800368a:	4614      	mov	r4, r2
 800368c:	461d      	mov	r5, r3
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	00eb      	lsls	r3, r5, #3
 8003698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369c:	00e2      	lsls	r2, r4, #3
 800369e:	460b      	mov	r3, r1
 80036a0:	3307      	adds	r3, #7
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	ebad 0d03 	sub.w	sp, sp, r3
 80036aa:	ab02      	add	r3, sp, #8
 80036ac:	3300      	adds	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
	/* ---- Pre Process ---- */
	tempTxBuffer[0] = Command;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	7cfa      	ldrb	r2, [r7, #19]
 80036b4:	701a      	strb	r2, [r3, #0]
	tempRxBuffer[0] = 0x00;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036c2:	e014      	b.n	80036ee <HAL_nRF24L01P_SendCommand+0xfa>
	{
		tempTxBuffer[i + 1] = TxBuffer[i]; // Fill tempTxBuffer with Command + All of TxBuffer
 80036c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	441a      	add	r2, r3
 80036cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036d0:	3301      	adds	r3, #1
 80036d2:	7811      	ldrb	r1, [r2, #0]
 80036d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d6:	54d1      	strb	r1, [r2, r3]
		tempRxBuffer[i + 1] = 0x00;
 80036d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036dc:	3301      	adds	r3, #1
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	2100      	movs	r1, #0
 80036e2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Size; i++)
 80036e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036e8:	3301      	adds	r3, #1
 80036ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80036f2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3e4      	bcc.n	80036c4 <HAL_nRF24L01P_SendCommand+0xd0>
	}
	/* ---- Fcn Process ---- */
	HAL_nRF24L01P_nSS_Low(nRF); // notSlaveSelect pin is Low
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f000 f846 	bl	800378c <HAL_nRF24L01P_nSS_Low>
	if(HAL_SPI_TransmitReceive(nRF->hspi, tempTxBuffer, tempRxBuffer, Size + 1, nRF_SPI_TIMEOUT) != HAL_OK)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003708:	b29b      	uxth	r3, r3
 800370a:	3301      	adds	r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003712:	9200      	str	r2, [sp, #0]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003718:	f002 fa60 	bl	8005bdc <HAL_SPI_TransmitReceive>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_nRF24L01P_SendCommand+0x132>
	{
		return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e01c      	b.n	8003760 <HAL_nRF24L01P_SendCommand+0x16c>
	}
	/* ---- PostProcess ---- */
	for(uint8_t i = 0; i < Size; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800372c:	e00e      	b.n	800374c <HAL_nRF24L01P_SendCommand+0x158>
	{
		RxBuffer[i] = tempRxBuffer[i + 1];
 800372e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	440b      	add	r3, r1
 800373c:	69f9      	ldr	r1, [r7, #28]
 800373e:	5c8a      	ldrb	r2, [r1, r2]
 8003740:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 8003742:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003746:	3301      	adds	r3, #1
 8003748:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800374c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003750:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003754:	429a      	cmp	r2, r3
 8003756:	d3ea      	bcc.n	800372e <HAL_nRF24L01P_SendCommand+0x13a>
	}
	HAL_nRF24L01P_nSS_High(nRF); // notSlaveSelect pin is High
 8003758:	6978      	ldr	r0, [r7, #20]
 800375a:	f000 f807 	bl	800376c <HAL_nRF24L01P_nSS_High>
	return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	46b5      	mov	sp, r6
}
 8003762:	4618      	mov	r0, r3
 8003764:	3734      	adds	r7, #52	@ 0x34
 8003766:	46bd      	mov	sp, r7
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800376c <HAL_nRF24L01P_nSS_High>:

void HAL_nRF24L01P_nSS_High(nRF24L01P *nRF)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_SET);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	2201      	movs	r2, #1
 800377e:	4619      	mov	r1, r3
 8003780:	f000 fd08 	bl	8004194 <HAL_GPIO_WritePin>
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_nRF24L01P_nSS_Low>:
void HAL_nRF24L01P_nSS_Low(nRF24L01P *nRF)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_RESET);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	2200      	movs	r2, #0
 800379e:	4619      	mov	r1, r3
 80037a0:	f000 fcf8 	bl	8004194 <HAL_GPIO_WritePin>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_nRF24L01P_CE_High>:
void HAL_nRF24L01P_CE_High(nRF24L01P *nRF)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_SET);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80037bc:	2201      	movs	r2, #1
 80037be:	4619      	mov	r1, r3
 80037c0:	f000 fce8 	bl	8004194 <HAL_GPIO_WritePin>
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_nRF24L01P_CE_Low>:
void HAL_nRF24L01P_CE_Low(nRF24L01P *nRF)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_RESET);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80037dc:	2200      	movs	r2, #0
 80037de:	4619      	mov	r1, r3
 80037e0:	f000 fcd8 	bl	8004194 <HAL_GPIO_WritePin>
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HAL_MspInit+0x5c>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	4a14      	ldr	r2, [pc, #80]	@ (8003848 <HAL_MspInit+0x5c>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6193      	str	r3, [r2, #24]
 80037fe:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_MspInit+0x5c>)
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <HAL_MspInit+0x5c>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	4a0e      	ldr	r2, [pc, #56]	@ (8003848 <HAL_MspInit+0x5c>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003814:	61d3      	str	r3, [r2, #28]
 8003816:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <HAL_MspInit+0x5c>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_MspInit+0x60>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_MspInit+0x60>)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000

08003850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08c      	sub	sp, #48	@ 0x30
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a32      	ldr	r2, [pc, #200]	@ (8003934 <HAL_I2C_MspInit+0xe4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d133      	bne.n	80038d8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003870:	4b31      	ldr	r3, [pc, #196]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a30      	ldr	r2, [pc, #192]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b2e      	ldr	r3, [pc, #184]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003888:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800388c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388e:	2312      	movs	r3, #18
 8003890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003892:	2303      	movs	r3, #3
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003896:	f107 031c 	add.w	r3, r7, #28
 800389a:	4619      	mov	r1, r3
 800389c:	4827      	ldr	r0, [pc, #156]	@ (800393c <HAL_I2C_MspInit+0xec>)
 800389e:	f000 faf5 	bl	8003e8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80038a2:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <HAL_I2C_MspInit+0xf0>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038aa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	f043 0302 	orr.w	r3, r3, #2
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b8:	4a21      	ldr	r2, [pc, #132]	@ (8003940 <HAL_I2C_MspInit+0xf0>)
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 80038c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038c8:	61d3      	str	r3, [r2, #28]
 80038ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038d6:	e029      	b.n	800392c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <HAL_I2C_MspInit+0xf4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d124      	bne.n	800392c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	6193      	str	r3, [r2, #24]
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80038fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003900:	2312      	movs	r3, #18
 8003902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	4619      	mov	r1, r3
 800390e:	480b      	ldr	r0, [pc, #44]	@ (800393c <HAL_I2C_MspInit+0xec>)
 8003910:	f000 fabc 	bl	8003e8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003914:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	4a07      	ldr	r2, [pc, #28]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 800391a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800391e:	61d3      	str	r3, [r2, #28]
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_I2C_MspInit+0xe8>)
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	bf00      	nop
 800392e:	3730      	adds	r7, #48	@ 0x30
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40005400 	.word	0x40005400
 8003938:	40021000 	.word	0x40021000
 800393c:	40010c00 	.word	0x40010c00
 8003940:	40010000 	.word	0x40010000
 8003944:	40005800 	.word	0x40005800

08003948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1b      	ldr	r2, [pc, #108]	@ (80039d0 <HAL_SPI_MspInit+0x88>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d12f      	bne.n	80039c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003968:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <HAL_SPI_MspInit+0x8c>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4a19      	ldr	r2, [pc, #100]	@ (80039d4 <HAL_SPI_MspInit+0x8c>)
 800396e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003972:	6193      	str	r3, [r2, #24]
 8003974:	4b17      	ldr	r3, [pc, #92]	@ (80039d4 <HAL_SPI_MspInit+0x8c>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	4b14      	ldr	r3, [pc, #80]	@ (80039d4 <HAL_SPI_MspInit+0x8c>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <HAL_SPI_MspInit+0x8c>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <HAL_SPI_MspInit+0x8c>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003998:	23a0      	movs	r3, #160	@ 0xa0
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 0310 	add.w	r3, r7, #16
 80039a8:	4619      	mov	r1, r3
 80039aa:	480b      	ldr	r0, [pc, #44]	@ (80039d8 <HAL_SPI_MspInit+0x90>)
 80039ac:	f000 fa6e 	bl	8003e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039b0:	2340      	movs	r3, #64	@ 0x40
 80039b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	4619      	mov	r1, r3
 80039c2:	4805      	ldr	r0, [pc, #20]	@ (80039d8 <HAL_SPI_MspInit+0x90>)
 80039c4:	f000 fa62 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039c8:	bf00      	nop
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40013000 	.word	0x40013000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40010800 	.word	0x40010800

080039dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <HAL_TIM_Base_MspInit+0x58>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_TIM_Base_MspInit+0x5c>)
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	4a11      	ldr	r2, [pc, #68]	@ (8003a38 <HAL_TIM_Base_MspInit+0x5c>)
 80039f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039f8:	6193      	str	r3, [r2, #24]
 80039fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <HAL_TIM_Base_MspInit+0x5c>)
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a06:	e010      	b.n	8003a2a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a10:	d10b      	bne.n	8003a2a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_TIM_Base_MspInit+0x5c>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4a08      	ldr	r2, [pc, #32]	@ (8003a38 <HAL_TIM_Base_MspInit+0x5c>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	61d3      	str	r3, [r2, #28]
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_TIM_Base_MspInit+0x5c>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0310 	add.w	r3, r7, #16
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a10      	ldr	r2, [pc, #64]	@ (8003a98 <HAL_TIM_MspPostInit+0x5c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d118      	bne.n	8003a8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <HAL_TIM_MspPostInit+0x60>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a0e      	ldr	r2, [pc, #56]	@ (8003a9c <HAL_TIM_MspPostInit+0x60>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <HAL_TIM_MspPostInit+0x60>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003a74:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a82:	f107 0310 	add.w	r3, r7, #16
 8003a86:	4619      	mov	r1, r3
 8003a88:	4805      	ldr	r0, [pc, #20]	@ (8003aa0 <HAL_TIM_MspPostInit+0x64>)
 8003a8a:	f000 f9ff 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a8e:	bf00      	nop
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40010800 	.word	0x40010800

08003aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <NMI_Handler+0x4>

08003aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <HardFault_Handler+0x4>

08003ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <MemManage_Handler+0x4>

08003abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <BusFault_Handler+0x4>

08003ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <UsageFault_Handler+0x4>

08003acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003af4:	f000 f87c 	bl	8003bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}

08003afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003b00:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003b04:	f000 fb78 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b18:	f7ff fff8 	bl	8003b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b1c:	480b      	ldr	r0, [pc, #44]	@ (8003b4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b1e:	490c      	ldr	r1, [pc, #48]	@ (8003b50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b20:	4a0c      	ldr	r2, [pc, #48]	@ (8003b54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b24:	e002      	b.n	8003b2c <LoopCopyDataInit>

08003b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2a:	3304      	adds	r3, #4

08003b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b30:	d3f9      	bcc.n	8003b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b34:	4c09      	ldr	r4, [pc, #36]	@ (8003b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b38:	e001      	b.n	8003b3e <LoopFillZerobss>

08003b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b3c:	3204      	adds	r2, #4

08003b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b40:	d3fb      	bcc.n	8003b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b42:	f003 f9d5 	bl	8006ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b46:	f7fd fe97 	bl	8001878 <main>
  bx lr
 8003b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8003b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003b54:	080074f8 	.word	0x080074f8
  ldr r2, =_sbss
 8003b58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003b5c:	200004d4 	.word	0x200004d4

08003b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b60:	e7fe      	b.n	8003b60 <ADC1_2_IRQHandler>
	...

08003b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b68:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <HAL_Init+0x28>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a07      	ldr	r2, [pc, #28]	@ (8003b8c <HAL_Init+0x28>)
 8003b6e:	f043 0310 	orr.w	r3, r3, #16
 8003b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b74:	2003      	movs	r0, #3
 8003b76:	f000 f947 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b7a:	200f      	movs	r0, #15
 8003b7c:	f000 f808 	bl	8003b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b80:	f7ff fe34 	bl	80037ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000

08003b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b98:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <HAL_InitTick+0x54>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <HAL_InitTick+0x58>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f95f 	bl	8003e72 <HAL_SYSTICK_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00e      	b.n	8003bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b0f      	cmp	r3, #15
 8003bc2:	d80a      	bhi.n	8003bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	f000 f927 	bl	8003e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd0:	4a06      	ldr	r2, [pc, #24]	@ (8003bec <HAL_InitTick+0x5c>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	20000014 	.word	0x20000014
 8003bec:	20000010 	.word	0x20000010

08003bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_IncTick+0x1c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_IncTick+0x20>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a03      	ldr	r2, [pc, #12]	@ (8003c10 <HAL_IncTick+0x20>)
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	20000014 	.word	0x20000014
 8003c10:	20000398 	.word	0x20000398

08003c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return uwTick;
 8003c18:	4b02      	ldr	r3, [pc, #8]	@ (8003c24 <HAL_GetTick+0x10>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	20000398 	.word	0x20000398

08003c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff fff0 	bl	8003c14 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d005      	beq.n	8003c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_Delay+0x44>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c4e:	bf00      	nop
 8003c50:	f7ff ffe0 	bl	8003c14 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d8f7      	bhi.n	8003c50 <HAL_Delay+0x28>
  {
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000014 	.word	0x20000014

08003c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	60d3      	str	r3, [r2, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	f003 0307 	and.w	r3, r3, #7
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	db0b      	blt.n	8003cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	4906      	ldr	r1, [pc, #24]	@ (8003d08 <__NVIC_EnableIRQ+0x34>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100

08003d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	6039      	str	r1, [r7, #0]
 8003d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	db0a      	blt.n	8003d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	490c      	ldr	r1, [pc, #48]	@ (8003d58 <__NVIC_SetPriority+0x4c>)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d34:	e00a      	b.n	8003d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4908      	ldr	r1, [pc, #32]	@ (8003d5c <__NVIC_SetPriority+0x50>)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3b04      	subs	r3, #4
 8003d44:	0112      	lsls	r2, r2, #4
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	440b      	add	r3, r1
 8003d4a:	761a      	strb	r2, [r3, #24]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	@ 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f1c3 0307 	rsb	r3, r3, #7
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	bf28      	it	cs
 8003d7e:	2304      	movcs	r3, #4
 8003d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3304      	adds	r3, #4
 8003d86:	2b06      	cmp	r3, #6
 8003d88:	d902      	bls.n	8003d90 <NVIC_EncodePriority+0x30>
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3b03      	subs	r3, #3
 8003d8e:	e000      	b.n	8003d92 <NVIC_EncodePriority+0x32>
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d94:	f04f 32ff 	mov.w	r2, #4294967295
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	401a      	ands	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	43d9      	mvns	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db8:	4313      	orrs	r3, r2
         );
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3724      	adds	r7, #36	@ 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd4:	d301      	bcc.n	8003dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <SysTick_Config+0x40>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de2:	210f      	movs	r1, #15
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f7ff ff90 	bl	8003d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dec:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <SysTick_Config+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df2:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <SysTick_Config+0x40>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010

08003e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff2d 	bl	8003c70 <__NVIC_SetPriorityGrouping>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e30:	f7ff ff42 	bl	8003cb8 <__NVIC_GetPriorityGrouping>
 8003e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f7ff ff90 	bl	8003d60 <NVIC_EncodePriority>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff5f 	bl	8003d0c <__NVIC_SetPriority>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff35 	bl	8003cd4 <__NVIC_EnableIRQ>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffa2 	bl	8003dc4 <SysTick_Config>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b08b      	sub	sp, #44	@ 0x2c
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e9e:	e169      	b.n	8004174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	f040 8158 	bne.w	800416e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4a9a      	ldr	r2, [pc, #616]	@ (800412c <HAL_GPIO_Init+0x2a0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d05e      	beq.n	8003f86 <HAL_GPIO_Init+0xfa>
 8003ec8:	4a98      	ldr	r2, [pc, #608]	@ (800412c <HAL_GPIO_Init+0x2a0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d875      	bhi.n	8003fba <HAL_GPIO_Init+0x12e>
 8003ece:	4a98      	ldr	r2, [pc, #608]	@ (8004130 <HAL_GPIO_Init+0x2a4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d058      	beq.n	8003f86 <HAL_GPIO_Init+0xfa>
 8003ed4:	4a96      	ldr	r2, [pc, #600]	@ (8004130 <HAL_GPIO_Init+0x2a4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d86f      	bhi.n	8003fba <HAL_GPIO_Init+0x12e>
 8003eda:	4a96      	ldr	r2, [pc, #600]	@ (8004134 <HAL_GPIO_Init+0x2a8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d052      	beq.n	8003f86 <HAL_GPIO_Init+0xfa>
 8003ee0:	4a94      	ldr	r2, [pc, #592]	@ (8004134 <HAL_GPIO_Init+0x2a8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d869      	bhi.n	8003fba <HAL_GPIO_Init+0x12e>
 8003ee6:	4a94      	ldr	r2, [pc, #592]	@ (8004138 <HAL_GPIO_Init+0x2ac>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d04c      	beq.n	8003f86 <HAL_GPIO_Init+0xfa>
 8003eec:	4a92      	ldr	r2, [pc, #584]	@ (8004138 <HAL_GPIO_Init+0x2ac>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d863      	bhi.n	8003fba <HAL_GPIO_Init+0x12e>
 8003ef2:	4a92      	ldr	r2, [pc, #584]	@ (800413c <HAL_GPIO_Init+0x2b0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d046      	beq.n	8003f86 <HAL_GPIO_Init+0xfa>
 8003ef8:	4a90      	ldr	r2, [pc, #576]	@ (800413c <HAL_GPIO_Init+0x2b0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d85d      	bhi.n	8003fba <HAL_GPIO_Init+0x12e>
 8003efe:	2b12      	cmp	r3, #18
 8003f00:	d82a      	bhi.n	8003f58 <HAL_GPIO_Init+0xcc>
 8003f02:	2b12      	cmp	r3, #18
 8003f04:	d859      	bhi.n	8003fba <HAL_GPIO_Init+0x12e>
 8003f06:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <HAL_GPIO_Init+0x80>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f87 	.word	0x08003f87
 8003f10:	08003f61 	.word	0x08003f61
 8003f14:	08003f73 	.word	0x08003f73
 8003f18:	08003fb5 	.word	0x08003fb5
 8003f1c:	08003fbb 	.word	0x08003fbb
 8003f20:	08003fbb 	.word	0x08003fbb
 8003f24:	08003fbb 	.word	0x08003fbb
 8003f28:	08003fbb 	.word	0x08003fbb
 8003f2c:	08003fbb 	.word	0x08003fbb
 8003f30:	08003fbb 	.word	0x08003fbb
 8003f34:	08003fbb 	.word	0x08003fbb
 8003f38:	08003fbb 	.word	0x08003fbb
 8003f3c:	08003fbb 	.word	0x08003fbb
 8003f40:	08003fbb 	.word	0x08003fbb
 8003f44:	08003fbb 	.word	0x08003fbb
 8003f48:	08003fbb 	.word	0x08003fbb
 8003f4c:	08003fbb 	.word	0x08003fbb
 8003f50:	08003f69 	.word	0x08003f69
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	4a79      	ldr	r2, [pc, #484]	@ (8004140 <HAL_GPIO_Init+0x2b4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f5e:	e02c      	b.n	8003fba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	623b      	str	r3, [r7, #32]
          break;
 8003f66:	e029      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	623b      	str	r3, [r7, #32]
          break;
 8003f70:	e024      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	3308      	adds	r3, #8
 8003f78:	623b      	str	r3, [r7, #32]
          break;
 8003f7a:	e01f      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	330c      	adds	r3, #12
 8003f82:	623b      	str	r3, [r7, #32]
          break;
 8003f84:	e01a      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f8e:	2304      	movs	r3, #4
 8003f90:	623b      	str	r3, [r7, #32]
          break;
 8003f92:	e013      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	611a      	str	r2, [r3, #16]
          break;
 8003fa6:	e009      	b.n	8003fbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fa8:	2308      	movs	r3, #8
 8003faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	615a      	str	r2, [r3, #20]
          break;
 8003fb2:	e003      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	623b      	str	r3, [r7, #32]
          break;
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_Init+0x130>
          break;
 8003fba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2bff      	cmp	r3, #255	@ 0xff
 8003fc0:	d801      	bhi.n	8003fc6 <HAL_GPIO_Init+0x13a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	e001      	b.n	8003fca <HAL_GPIO_Init+0x13e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2bff      	cmp	r3, #255	@ 0xff
 8003fd0:	d802      	bhi.n	8003fd8 <HAL_GPIO_Init+0x14c>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	e002      	b.n	8003fde <HAL_GPIO_Init+0x152>
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	3b08      	subs	r3, #8
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	210f      	movs	r1, #15
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	401a      	ands	r2, r3
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80b1 	beq.w	800416e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800400c:	4b4d      	ldr	r3, [pc, #308]	@ (8004144 <HAL_GPIO_Init+0x2b8>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4a4c      	ldr	r2, [pc, #304]	@ (8004144 <HAL_GPIO_Init+0x2b8>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6193      	str	r3, [r2, #24]
 8004018:	4b4a      	ldr	r3, [pc, #296]	@ (8004144 <HAL_GPIO_Init+0x2b8>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004024:	4a48      	ldr	r2, [pc, #288]	@ (8004148 <HAL_GPIO_Init+0x2bc>)
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	3302      	adds	r3, #2
 800402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004030:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	220f      	movs	r2, #15
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a40      	ldr	r2, [pc, #256]	@ (800414c <HAL_GPIO_Init+0x2c0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_GPIO_Init+0x1ec>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3f      	ldr	r2, [pc, #252]	@ (8004150 <HAL_GPIO_Init+0x2c4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00d      	beq.n	8004074 <HAL_GPIO_Init+0x1e8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3e      	ldr	r2, [pc, #248]	@ (8004154 <HAL_GPIO_Init+0x2c8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <HAL_GPIO_Init+0x1e4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3d      	ldr	r2, [pc, #244]	@ (8004158 <HAL_GPIO_Init+0x2cc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_GPIO_Init+0x1e0>
 8004068:	2303      	movs	r3, #3
 800406a:	e006      	b.n	800407a <HAL_GPIO_Init+0x1ee>
 800406c:	2304      	movs	r3, #4
 800406e:	e004      	b.n	800407a <HAL_GPIO_Init+0x1ee>
 8004070:	2302      	movs	r3, #2
 8004072:	e002      	b.n	800407a <HAL_GPIO_Init+0x1ee>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_GPIO_Init+0x1ee>
 8004078:	2300      	movs	r3, #0
 800407a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407c:	f002 0203 	and.w	r2, r2, #3
 8004080:	0092      	lsls	r2, r2, #2
 8004082:	4093      	lsls	r3, r2
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800408a:	492f      	ldr	r1, [pc, #188]	@ (8004148 <HAL_GPIO_Init+0x2bc>)
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	089b      	lsrs	r3, r3, #2
 8004090:	3302      	adds	r3, #2
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040a4:	4b2d      	ldr	r3, [pc, #180]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	492c      	ldr	r1, [pc, #176]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]
 80040b0:	e006      	b.n	80040c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040b2:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	4928      	ldr	r1, [pc, #160]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040bc:	4013      	ands	r3, r2
 80040be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d006      	beq.n	80040da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040cc:	4b23      	ldr	r3, [pc, #140]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4922      	ldr	r1, [pc, #136]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60cb      	str	r3, [r1, #12]
 80040d8:	e006      	b.n	80040e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	491e      	ldr	r1, [pc, #120]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d006      	beq.n	8004102 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040f4:	4b19      	ldr	r3, [pc, #100]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4918      	ldr	r1, [pc, #96]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	e006      	b.n	8004110 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004102:	4b16      	ldr	r3, [pc, #88]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	43db      	mvns	r3, r3
 800410a:	4914      	ldr	r1, [pc, #80]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 800410c:	4013      	ands	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d021      	beq.n	8004160 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	490e      	ldr	r1, [pc, #56]	@ (800415c <HAL_GPIO_Init+0x2d0>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
 8004128:	e021      	b.n	800416e <HAL_GPIO_Init+0x2e2>
 800412a:	bf00      	nop
 800412c:	10320000 	.word	0x10320000
 8004130:	10310000 	.word	0x10310000
 8004134:	10220000 	.word	0x10220000
 8004138:	10210000 	.word	0x10210000
 800413c:	10120000 	.word	0x10120000
 8004140:	10110000 	.word	0x10110000
 8004144:	40021000 	.word	0x40021000
 8004148:	40010000 	.word	0x40010000
 800414c:	40010800 	.word	0x40010800
 8004150:	40010c00 	.word	0x40010c00
 8004154:	40011000 	.word	0x40011000
 8004158:	40011400 	.word	0x40011400
 800415c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_GPIO_Init+0x304>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	43db      	mvns	r3, r3
 8004168:	4909      	ldr	r1, [pc, #36]	@ (8004190 <HAL_GPIO_Init+0x304>)
 800416a:	4013      	ands	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	3301      	adds	r3, #1
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f47f ae8e 	bne.w	8003ea0 <HAL_GPIO_Init+0x14>
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	372c      	adds	r7, #44	@ 0x2c
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	40010400 	.word	0x40010400

08004194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
 80041a0:	4613      	mov	r3, r2
 80041a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041b0:	e003      	b.n	80041ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	041a      	lsls	r2, r3, #16
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	041a      	lsls	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	43d9      	mvns	r1, r3
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	400b      	ands	r3, r1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	611a      	str	r2, [r3, #16]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420e:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fe86 	bl	8001f28 <HAL_GPIO_EXTI_Callback>
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40010400 	.word	0x40010400

08004228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e12b      	b.n	8004492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fafe 	bl	8003850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	@ 0x24
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800427a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800428a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800428c:	f001 fbf0 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8004290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a81      	ldr	r2, [pc, #516]	@ (800449c <HAL_I2C_Init+0x274>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d807      	bhi.n	80042ac <HAL_I2C_Init+0x84>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a80      	ldr	r2, [pc, #512]	@ (80044a0 <HAL_I2C_Init+0x278>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bf94      	ite	ls
 80042a4:	2301      	movls	r3, #1
 80042a6:	2300      	movhi	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e006      	b.n	80042ba <HAL_I2C_Init+0x92>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a7d      	ldr	r2, [pc, #500]	@ (80044a4 <HAL_I2C_Init+0x27c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	bf94      	ite	ls
 80042b4:	2301      	movls	r3, #1
 80042b6:	2300      	movhi	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0e7      	b.n	8004492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a78      	ldr	r2, [pc, #480]	@ (80044a8 <HAL_I2C_Init+0x280>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	0c9b      	lsrs	r3, r3, #18
 80042cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a6a      	ldr	r2, [pc, #424]	@ (800449c <HAL_I2C_Init+0x274>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d802      	bhi.n	80042fc <HAL_I2C_Init+0xd4>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3301      	adds	r3, #1
 80042fa:	e009      	b.n	8004310 <HAL_I2C_Init+0xe8>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <HAL_I2C_Init+0x284>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	3301      	adds	r3, #1
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004322:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	495c      	ldr	r1, [pc, #368]	@ (800449c <HAL_I2C_Init+0x274>)
 800432c:	428b      	cmp	r3, r1
 800432e:	d819      	bhi.n	8004364 <HAL_I2C_Init+0x13c>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e59      	subs	r1, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fbb1 f3f3 	udiv	r3, r1, r3
 800433e:	1c59      	adds	r1, r3, #1
 8004340:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004344:	400b      	ands	r3, r1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_I2C_Init+0x138>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1e59      	subs	r1, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fbb1 f3f3 	udiv	r3, r1, r3
 8004358:	3301      	adds	r3, #1
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	e051      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 8004360:	2304      	movs	r3, #4
 8004362:	e04f      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d111      	bne.n	8004390 <HAL_I2C_Init+0x168>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1e58      	subs	r0, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e012      	b.n	80043b6 <HAL_I2C_Init+0x18e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e58      	subs	r0, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	0099      	lsls	r1, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Init+0x196>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e022      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10e      	bne.n	80043e4 <HAL_I2C_Init+0x1bc>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e58      	subs	r0, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	440b      	add	r3, r1
 80043d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e2:	e00f      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e58      	subs	r0, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	0099      	lsls	r1, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	6809      	ldr	r1, [r1, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004432:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6911      	ldr	r1, [r2, #16]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	430b      	orrs	r3, r1
 8004446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	000186a0 	.word	0x000186a0
 80044a0:	001e847f 	.word	0x001e847f
 80044a4:	003d08ff 	.word	0x003d08ff
 80044a8:	431bde83 	.word	0x431bde83
 80044ac:	10624dd3 	.word	0x10624dd3

080044b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	817b      	strh	r3, [r7, #10]
 80044c2:	460b      	mov	r3, r1
 80044c4:	813b      	strh	r3, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044ca:	f7ff fba3 	bl	8003c14 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b20      	cmp	r3, #32
 80044da:	f040 80d9 	bne.w	8004690 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2319      	movs	r3, #25
 80044e4:	2201      	movs	r2, #1
 80044e6:	496d      	ldr	r1, [pc, #436]	@ (800469c <HAL_I2C_Mem_Write+0x1ec>)
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fcc1 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	e0cc      	b.n	8004692 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_I2C_Mem_Write+0x56>
 8004502:	2302      	movs	r3, #2
 8004504:	e0c5      	b.n	8004692 <HAL_I2C_Mem_Write+0x1e2>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d007      	beq.n	800452c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800453a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2221      	movs	r2, #33	@ 0x21
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2240      	movs	r2, #64	@ 0x40
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800455c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a4d      	ldr	r2, [pc, #308]	@ (80046a0 <HAL_I2C_Mem_Write+0x1f0>)
 800456c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800456e:	88f8      	ldrh	r0, [r7, #6]
 8004570:	893a      	ldrh	r2, [r7, #8]
 8004572:	8979      	ldrh	r1, [r7, #10]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4603      	mov	r3, r0
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 faf8 	bl	8004b74 <I2C_RequestMemoryWrite>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d052      	beq.n	8004630 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e081      	b.n	8004692 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fd86 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d107      	bne.n	80045b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e06b      	b.n	8004692 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11b      	bne.n	8004630 <HAL_I2C_Mem_Write+0x180>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1aa      	bne.n	800458e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fd79 	bl	8005134 <I2C_WaitOnBTFFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	2b04      	cmp	r3, #4
 800464e:	d107      	bne.n	8004660 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e016      	b.n	8004692 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	00100002 	.word	0x00100002
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08c      	sub	sp, #48	@ 0x30
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	817b      	strh	r3, [r7, #10]
 80046b6:	460b      	mov	r3, r1
 80046b8:	813b      	strh	r3, [r7, #8]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046c2:	f7ff faa7 	bl	8003c14 <HAL_GetTick>
 80046c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	f040 8244 	bne.w	8004b5e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2319      	movs	r3, #25
 80046dc:	2201      	movs	r2, #1
 80046de:	4982      	ldr	r1, [pc, #520]	@ (80048e8 <HAL_I2C_Mem_Read+0x244>)
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fbc5 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
 80046ee:	e237      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_I2C_Mem_Read+0x5a>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e230      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d007      	beq.n	8004724 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2222      	movs	r2, #34	@ 0x22
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2240      	movs	r2, #64	@ 0x40
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a62      	ldr	r2, [pc, #392]	@ (80048ec <HAL_I2C_Mem_Read+0x248>)
 8004764:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004766:	88f8      	ldrh	r0, [r7, #6]
 8004768:	893a      	ldrh	r2, [r7, #8]
 800476a:	8979      	ldrh	r1, [r7, #10]
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4603      	mov	r3, r0
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fa92 	bl	8004ca0 <I2C_RequestMemoryRead>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1ec      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e1c0      	b.n	8004b38 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d11e      	bne.n	80047fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047ce:	b672      	cpsid	i
}
 80047d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047f8:	b662      	cpsie	i
}
 80047fa:	e035      	b.n	8004868 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11e      	bne.n	8004842 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004814:	b672      	cpsid	i
}
 8004816:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800483e:	b662      	cpsie	i
}
 8004840:	e012      	b.n	8004868 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004850:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004868:	e166      	b.n	8004b38 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	2b03      	cmp	r3, #3
 8004870:	f200 811f 	bhi.w	8004ab2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004878:	2b01      	cmp	r3, #1
 800487a:	d123      	bne.n	80048c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fc9f 	bl	80051c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e167      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048c2:	e139      	b.n	8004b38 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d152      	bne.n	8004972 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	2200      	movs	r2, #0
 80048d4:	4906      	ldr	r1, [pc, #24]	@ (80048f0 <HAL_I2C_Mem_Read+0x24c>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 faca 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e13c      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
 80048e6:	bf00      	nop
 80048e8:	00100002 	.word	0x00100002
 80048ec:	ffff0000 	.word	0xffff0000
 80048f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80048f4:	b672      	cpsid	i
}
 80048f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800493a:	b662      	cpsie	i
}
 800493c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004970:	e0e2      	b.n	8004b38 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	2200      	movs	r2, #0
 800497a:	497b      	ldr	r1, [pc, #492]	@ (8004b68 <HAL_I2C_Mem_Read+0x4c4>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fa77 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0e9      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800499c:	b672      	cpsid	i
}
 800499e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049d2:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <HAL_I2C_Mem_Read+0x4c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	08db      	lsrs	r3, r3, #3
 80049d8:	4a65      	ldr	r2, [pc, #404]	@ (8004b70 <HAL_I2C_Mem_Read+0x4cc>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a1a      	lsrs	r2, r3, #8
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	00da      	lsls	r2, r3, #3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d118      	bne.n	8004a2a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a1a:	b662      	cpsie	i
}
 8004a1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e09a      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d1d9      	bne.n	80049ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a7a:	b662      	cpsie	i
}
 8004a7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ab0:	e042      	b.n	8004b38 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fb84 	bl	80051c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e04c      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d118      	bne.n	8004b38 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f47f ae94 	bne.w	800486a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
  }
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3728      	adds	r7, #40	@ 0x28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	00010004 	.word	0x00010004
 8004b6c:	2000000c 	.word	0x2000000c
 8004b70:	14f8b589 	.word	0x14f8b589

08004b74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	817b      	strh	r3, [r7, #10]
 8004b86:	460b      	mov	r3, r1
 8004b88:	813b      	strh	r3, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f960 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc4:	d103      	bne.n	8004bce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e05f      	b.n	8004c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bd2:	897b      	ldrh	r3, [r7, #10]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	492d      	ldr	r1, [pc, #180]	@ (8004c9c <I2C_RequestMemoryWrite+0x128>)
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f9bb 	bl	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e04c      	b.n	8004c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fa46 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d107      	bne.n	8004c36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e02b      	b.n	8004c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d105      	bne.n	8004c4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c40:	893b      	ldrh	r3, [r7, #8]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	611a      	str	r2, [r3, #16]
 8004c4a:	e021      	b.n	8004c90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c4c:	893b      	ldrh	r3, [r7, #8]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5c:	6a39      	ldr	r1, [r7, #32]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa20 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d107      	bne.n	8004c82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e005      	b.n	8004c92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c86:	893b      	ldrh	r3, [r7, #8]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	00010002 	.word	0x00010002

08004ca0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	817b      	strh	r3, [r7, #10]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	813b      	strh	r3, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f8c2 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d00:	d103      	bne.n	8004d0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e0aa      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d0e:	897b      	ldrh	r3, [r7, #10]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	4952      	ldr	r1, [pc, #328]	@ (8004e6c <I2C_RequestMemoryRead+0x1cc>)
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f91d 	bl	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e097      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f9a8 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d107      	bne.n	8004d72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e076      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7c:	893b      	ldrh	r3, [r7, #8]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]
 8004d86:	e021      	b.n	8004dcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f982 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d107      	bne.n	8004dbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e050      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc2:	893b      	ldrh	r3, [r7, #8]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dce:	6a39      	ldr	r1, [r7, #32]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f967 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d107      	bne.n	8004df4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e035      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f82b 	bl	8004e70 <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e2e:	d103      	bne.n	8004e38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e013      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e3c:	897b      	ldrh	r3, [r7, #10]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	6a3a      	ldr	r2, [r7, #32]
 8004e50:	4906      	ldr	r1, [pc, #24]	@ (8004e6c <I2C_RequestMemoryRead+0x1cc>)
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f886 	bl	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	00010002 	.word	0x00010002

08004e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e80:	e048      	b.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d044      	beq.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fe fec3 	bl	8003c14 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d139      	bne.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d10d      	bne.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	43da      	mvns	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	e00c      	b.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	43da      	mvns	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d116      	bne.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e023      	b.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10d      	bne.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	43da      	mvns	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	e00c      	b.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	43da      	mvns	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d093      	beq.n	8004e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f72:	e071      	b.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f82:	d123      	bne.n	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	f043 0204 	orr.w	r2, r3, #4
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e067      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d041      	beq.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd4:	f7fe fe1e 	bl	8003c14 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d136      	bne.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10c      	bne.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	bf14      	ite	ne
 8005006:	2301      	movne	r3, #1
 8005008:	2300      	moveq	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e00b      	b.n	8005026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	43da      	mvns	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e021      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10c      	bne.n	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	43da      	mvns	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e00b      	b.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	43da      	mvns	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf14      	ite	ne
 800508e:	2301      	movne	r3, #1
 8005090:	2300      	moveq	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f af6d 	bne.w	8004f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b0:	e034      	b.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f8e3 	bl	800527e <I2C_IsAcknowledgeFailed>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e034      	b.n	800512c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d028      	beq.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fe fda3 	bl	8003c14 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11d      	bne.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ea:	2b80      	cmp	r3, #128	@ 0x80
 80050ec:	d016      	beq.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e007      	b.n	800512c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d1c3      	bne.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005140:	e034      	b.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f89b 	bl	800527e <I2C_IsAcknowledgeFailed>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e034      	b.n	80051bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d028      	beq.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515a:	f7fe fd5b 	bl	8003c14 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	d302      	bcc.n	8005170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d11d      	bne.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b04      	cmp	r3, #4
 800517c:	d016      	beq.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e007      	b.n	80051bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d1c3      	bne.n	8005142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051d0:	e049      	b.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d119      	bne.n	8005214 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0210 	mvn.w	r2, #16
 80051e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e030      	b.n	8005276 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005214:	f7fe fcfe 	bl	8003c14 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	429a      	cmp	r2, r3
 8005222:	d302      	bcc.n	800522a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11d      	bne.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d016      	beq.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e007      	b.n	8005276 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005270:	2b40      	cmp	r3, #64	@ 0x40
 8005272:	d1ae      	bne.n	80051d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005294:	d11b      	bne.n	80052ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800529e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f043 0204 	orr.w	r2, r3, #4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e272      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8087 	beq.w	800540a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052fc:	4b92      	ldr	r3, [pc, #584]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b04      	cmp	r3, #4
 8005306:	d00c      	beq.n	8005322 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005308:	4b8f      	ldr	r3, [pc, #572]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 030c 	and.w	r3, r3, #12
 8005310:	2b08      	cmp	r3, #8
 8005312:	d112      	bne.n	800533a <HAL_RCC_OscConfig+0x5e>
 8005314:	4b8c      	ldr	r3, [pc, #560]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005320:	d10b      	bne.n	800533a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005322:	4b89      	ldr	r3, [pc, #548]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d06c      	beq.n	8005408 <HAL_RCC_OscConfig+0x12c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d168      	bne.n	8005408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e24c      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005342:	d106      	bne.n	8005352 <HAL_RCC_OscConfig+0x76>
 8005344:	4b80      	ldr	r3, [pc, #512]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a7f      	ldr	r2, [pc, #508]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e02e      	b.n	80053b0 <HAL_RCC_OscConfig+0xd4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0x98>
 800535a:	4b7b      	ldr	r3, [pc, #492]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a7a      	ldr	r2, [pc, #488]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b78      	ldr	r3, [pc, #480]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a77      	ldr	r2, [pc, #476]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800536c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e01d      	b.n	80053b0 <HAL_RCC_OscConfig+0xd4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0xbc>
 800537e:	4b72      	ldr	r3, [pc, #456]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a71      	ldr	r2, [pc, #452]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b6f      	ldr	r3, [pc, #444]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a6e      	ldr	r2, [pc, #440]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0xd4>
 8005398:	4b6b      	ldr	r3, [pc, #428]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6a      	ldr	r2, [pc, #424]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800539e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b68      	ldr	r3, [pc, #416]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a67      	ldr	r2, [pc, #412]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80053aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fe fc2c 	bl	8003c14 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fe fc28 	bl	8003c14 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	@ 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e200      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0xe4>
 80053de:	e014      	b.n	800540a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fe fc18 	bl	8003c14 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e8:	f7fe fc14 	bl	8003c14 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	@ 0x64
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e1ec      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053fa:	4b53      	ldr	r3, [pc, #332]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x10c>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d063      	beq.n	80054de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005416:	4b4c      	ldr	r3, [pc, #304]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005422:	4b49      	ldr	r3, [pc, #292]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d11c      	bne.n	8005468 <HAL_RCC_OscConfig+0x18c>
 800542e:	4b46      	ldr	r3, [pc, #280]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d116      	bne.n	8005468 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543a:	4b43      	ldr	r3, [pc, #268]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_RCC_OscConfig+0x176>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e1c0      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005452:	4b3d      	ldr	r3, [pc, #244]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4939      	ldr	r1, [pc, #228]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005466:	e03a      	b.n	80054de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d020      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005470:	4b36      	ldr	r3, [pc, #216]	@ (800554c <HAL_RCC_OscConfig+0x270>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005476:	f7fe fbcd 	bl	8003c14 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547e:	f7fe fbc9 	bl	8003c14 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1a1      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005490:	4b2d      	ldr	r3, [pc, #180]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549c:	4b2a      	ldr	r3, [pc, #168]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4927      	ldr	r1, [pc, #156]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	e015      	b.n	80054de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054b2:	4b26      	ldr	r3, [pc, #152]	@ (800554c <HAL_RCC_OscConfig+0x270>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b8:	f7fe fbac 	bl	8003c14 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c0:	f7fe fba8 	bl	8003c14 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e180      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03a      	beq.n	8005560 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d019      	beq.n	8005526 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054f2:	4b17      	ldr	r3, [pc, #92]	@ (8005550 <HAL_RCC_OscConfig+0x274>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f8:	f7fe fb8c 	bl	8003c14 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005500:	f7fe fb88 	bl	8003c14 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e160      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <HAL_RCC_OscConfig+0x26c>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800551e:	2001      	movs	r0, #1
 8005520:	f000 faba 	bl	8005a98 <RCC_Delay>
 8005524:	e01c      	b.n	8005560 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005526:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <HAL_RCC_OscConfig+0x274>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552c:	f7fe fb72 	bl	8003c14 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005532:	e00f      	b.n	8005554 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005534:	f7fe fb6e 	bl	8003c14 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d908      	bls.n	8005554 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e146      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000
 800554c:	42420000 	.word	0x42420000
 8005550:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005554:	4b92      	ldr	r3, [pc, #584]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e9      	bne.n	8005534 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80a6 	beq.w	80056ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800556e:	2300      	movs	r3, #0
 8005570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005572:	4b8b      	ldr	r3, [pc, #556]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10d      	bne.n	800559a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557e:	4b88      	ldr	r3, [pc, #544]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	4a87      	ldr	r2, [pc, #540]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005588:	61d3      	str	r3, [r2, #28]
 800558a:	4b85      	ldr	r3, [pc, #532]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559a:	4b82      	ldr	r3, [pc, #520]	@ (80057a4 <HAL_RCC_OscConfig+0x4c8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d118      	bne.n	80055d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055a6:	4b7f      	ldr	r3, [pc, #508]	@ (80057a4 <HAL_RCC_OscConfig+0x4c8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7e      	ldr	r2, [pc, #504]	@ (80057a4 <HAL_RCC_OscConfig+0x4c8>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b2:	f7fe fb2f 	bl	8003c14 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ba:	f7fe fb2b 	bl	8003c14 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b64      	cmp	r3, #100	@ 0x64
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e103      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055cc:	4b75      	ldr	r3, [pc, #468]	@ (80057a4 <HAL_RCC_OscConfig+0x4c8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d106      	bne.n	80055ee <HAL_RCC_OscConfig+0x312>
 80055e0:	4b6f      	ldr	r3, [pc, #444]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4a6e      	ldr	r2, [pc, #440]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	6213      	str	r3, [r2, #32]
 80055ec:	e02d      	b.n	800564a <HAL_RCC_OscConfig+0x36e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10c      	bne.n	8005610 <HAL_RCC_OscConfig+0x334>
 80055f6:	4b6a      	ldr	r3, [pc, #424]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	4a69      	ldr	r2, [pc, #420]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6213      	str	r3, [r2, #32]
 8005602:	4b67      	ldr	r3, [pc, #412]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	4a66      	ldr	r2, [pc, #408]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	6213      	str	r3, [r2, #32]
 800560e:	e01c      	b.n	800564a <HAL_RCC_OscConfig+0x36e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b05      	cmp	r3, #5
 8005616:	d10c      	bne.n	8005632 <HAL_RCC_OscConfig+0x356>
 8005618:	4b61      	ldr	r3, [pc, #388]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4a60      	ldr	r2, [pc, #384]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800561e:	f043 0304 	orr.w	r3, r3, #4
 8005622:	6213      	str	r3, [r2, #32]
 8005624:	4b5e      	ldr	r3, [pc, #376]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	4a5d      	ldr	r2, [pc, #372]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6213      	str	r3, [r2, #32]
 8005630:	e00b      	b.n	800564a <HAL_RCC_OscConfig+0x36e>
 8005632:	4b5b      	ldr	r3, [pc, #364]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4a5a      	ldr	r2, [pc, #360]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	6213      	str	r3, [r2, #32]
 800563e:	4b58      	ldr	r3, [pc, #352]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d015      	beq.n	800567e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005652:	f7fe fadf 	bl	8003c14 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	e00a      	b.n	8005670 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fe fadb 	bl	8003c14 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0b1      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	4b4b      	ldr	r3, [pc, #300]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ee      	beq.n	800565a <HAL_RCC_OscConfig+0x37e>
 800567c:	e014      	b.n	80056a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7fe fac9 	bl	8003c14 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005684:	e00a      	b.n	800569c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fe fac5 	bl	8003c14 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e09b      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800569c:	4b40      	ldr	r3, [pc, #256]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ee      	bne.n	8005686 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ae:	4b3c      	ldr	r3, [pc, #240]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80056b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8087 	beq.w	80057d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056c4:	4b36      	ldr	r3, [pc, #216]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 030c 	and.w	r3, r3, #12
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d061      	beq.n	8005794 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d146      	bne.n	8005766 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d8:	4b33      	ldr	r3, [pc, #204]	@ (80057a8 <HAL_RCC_OscConfig+0x4cc>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fe fa99 	bl	8003c14 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e6:	f7fe fa95 	bl	8003c14 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e06d      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f8:	4b29      	ldr	r3, [pc, #164]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570c:	d108      	bne.n	8005720 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800570e:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4921      	ldr	r1, [pc, #132]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005720:	4b1f      	ldr	r3, [pc, #124]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a19      	ldr	r1, [r3, #32]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	430b      	orrs	r3, r1
 8005732:	491b      	ldr	r1, [pc, #108]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005738:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <HAL_RCC_OscConfig+0x4cc>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fe fa69 	bl	8003c14 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fe fa65 	bl	8003c14 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e03d      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005758:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x46a>
 8005764:	e035      	b.n	80057d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_RCC_OscConfig+0x4cc>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fe fa52 	bl	8003c14 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fe fa4e 	bl	8003c14 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e026      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_OscConfig+0x4c4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x498>
 8005792:	e01e      	b.n	80057d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e019      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40007000 	.word	0x40007000
 80057a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057ac:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <HAL_RCC_OscConfig+0x500>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d106      	bne.n	80057ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d001      	beq.n	80057d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000

080057e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0d0      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057f4:	4b6a      	ldr	r3, [pc, #424]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d910      	bls.n	8005824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	4b67      	ldr	r3, [pc, #412]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 0207 	bic.w	r2, r3, #7
 800580a:	4965      	ldr	r1, [pc, #404]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	4313      	orrs	r3, r2
 8005810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b63      	ldr	r3, [pc, #396]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0b8      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800583c:	4b59      	ldr	r3, [pc, #356]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a58      	ldr	r2, [pc, #352]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005842:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005854:	4b53      	ldr	r3, [pc, #332]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4a52      	ldr	r2, [pc, #328]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800585a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800585e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005860:	4b50      	ldr	r3, [pc, #320]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	494d      	ldr	r1, [pc, #308]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	4313      	orrs	r3, r2
 8005870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d040      	beq.n	8005900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005886:	4b47      	ldr	r3, [pc, #284]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d115      	bne.n	80058be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07f      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589e:	4b41      	ldr	r3, [pc, #260]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e073      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ae:	4b3d      	ldr	r3, [pc, #244]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e06b      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058be:	4b39      	ldr	r3, [pc, #228]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f023 0203 	bic.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4936      	ldr	r1, [pc, #216]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058d0:	f7fe f9a0 	bl	8003c14 <HAL_GetTick>
 80058d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	e00a      	b.n	80058ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d8:	f7fe f99c 	bl	8003c14 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e053      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ee:	4b2d      	ldr	r3, [pc, #180]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 020c 	and.w	r2, r3, #12
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d1eb      	bne.n	80058d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005900:	4b27      	ldr	r3, [pc, #156]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d210      	bcs.n	8005930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b24      	ldr	r3, [pc, #144]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 0207 	bic.w	r2, r3, #7
 8005916:	4922      	ldr	r1, [pc, #136]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b20      	ldr	r3, [pc, #128]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e032      	b.n	8005996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800593c:	4b19      	ldr	r3, [pc, #100]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4916      	ldr	r1, [pc, #88]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d009      	beq.n	800596e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800595a:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	490e      	ldr	r1, [pc, #56]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	4313      	orrs	r3, r2
 800596c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800596e:	f000 f821 	bl	80059b4 <HAL_RCC_GetSysClockFreq>
 8005972:	4602      	mov	r2, r0
 8005974:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	490a      	ldr	r1, [pc, #40]	@ (80059a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005980:	5ccb      	ldrb	r3, [r1, r3]
 8005982:	fa22 f303 	lsr.w	r3, r2, r3
 8005986:	4a09      	ldr	r2, [pc, #36]	@ (80059ac <HAL_RCC_ClockConfig+0x1cc>)
 8005988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800598a:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <HAL_RCC_ClockConfig+0x1d0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe f8fe 	bl	8003b90 <HAL_InitTick>

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40022000 	.word	0x40022000
 80059a4:	40021000 	.word	0x40021000
 80059a8:	08007484 	.word	0x08007484
 80059ac:	2000000c 	.word	0x2000000c
 80059b0:	20000010 	.word	0x20000010

080059b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x94>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d002      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x30>
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x36>
 80059e2:	e027      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059e4:	4b19      	ldr	r3, [pc, #100]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80059e6:	613b      	str	r3, [r7, #16]
      break;
 80059e8:	e027      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0c9b      	lsrs	r3, r3, #18
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	4a17      	ldr	r2, [pc, #92]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059f4:	5cd3      	ldrb	r3, [r2, r3]
 80059f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a02:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	0c5b      	lsrs	r3, r3, #17
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	4a11      	ldr	r2, [pc, #68]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a0d      	ldr	r2, [pc, #52]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a16:	fb03 f202 	mul.w	r2, r3, r2
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e004      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	613b      	str	r3, [r7, #16]
      break;
 8005a32:	e002      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a36:	613b      	str	r3, [r7, #16]
      break;
 8005a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a3a:	693b      	ldr	r3, [r7, #16]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	007a1200 	.word	0x007a1200
 8005a50:	0800749c 	.word	0x0800749c
 8005a54:	080074ac 	.word	0x080074ac
 8005a58:	003d0900 	.word	0x003d0900

08005a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a60:	4b02      	ldr	r3, [pc, #8]	@ (8005a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8005a62:	681b      	ldr	r3, [r3, #0]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a74:	f7ff fff2 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4903      	ldr	r1, [pc, #12]	@ (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40021000 	.word	0x40021000
 8005a94:	08007494 	.word	0x08007494

08005a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <RCC_Delay+0x34>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <RCC_Delay+0x38>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	0a5b      	lsrs	r3, r3, #9
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ab4:	bf00      	nop
  }
  while (Delay --);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	60fa      	str	r2, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f9      	bne.n	8005ab4 <RCC_Delay+0x1c>
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	2000000c 	.word	0x2000000c
 8005ad0:	10624dd3 	.word	0x10624dd3

08005ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e076      	b.n	8005bd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af6:	d009      	beq.n	8005b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	61da      	str	r2, [r3, #28]
 8005afe:	e005      	b.n	8005b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fd ff0e 	bl	8003948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b90:	ea42 0103 	orr.w	r1, r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	0c1a      	lsrs	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f002 0204 	and.w	r2, r2, #4
 8005bb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	@ 0x30
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bea:	2301      	movs	r3, #1
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x26>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e198      	b.n	8005f34 <HAL_SPI_TransmitReceive+0x358>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c0a:	f7fe f803 	bl	8003c14 <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c20:	887b      	ldrh	r3, [r7, #2]
 8005c22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d00f      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x70>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c32:	d107      	bne.n	8005c44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <HAL_SPI_TransmitReceive+0x68>
 8005c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d003      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005c4a:	e16d      	b.n	8005f28 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_SPI_TransmitReceive+0x82>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_SPI_TransmitReceive+0x82>
 8005c58:	887b      	ldrh	r3, [r7, #2]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005c64:	e160      	b.n	8005f28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d003      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2205      	movs	r2, #5
 8005c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	887a      	ldrh	r2, [r7, #2]
 8005c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	887a      	ldrh	r2, [r7, #2]
 8005c90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	887a      	ldrh	r2, [r7, #2]
 8005ca2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cba:	2b40      	cmp	r3, #64	@ 0x40
 8005cbc:	d007      	beq.n	8005cce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd6:	d17c      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x10a>
 8005ce0:	8b7b      	ldrh	r3, [r7, #26]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d16a      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	881a      	ldrh	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	1c9a      	adds	r2, r3, #2
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0a:	e057      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d11b      	bne.n	8005d52 <HAL_SPI_TransmitReceive+0x176>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d016      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x176>
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d113      	bne.n	8005d52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3a:	1c9a      	adds	r2, r3, #2
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d119      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x1b8>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d014      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	b292      	uxth	r2, r2
 8005d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d90:	2301      	movs	r3, #1
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d94:	f7fd ff3e 	bl	8003c14 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d80b      	bhi.n	8005dbc <HAL_SPI_TransmitReceive+0x1e0>
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d007      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005dba:	e0b5      	b.n	8005f28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1a2      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x130>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d19d      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x130>
 8005dd0:	e080      	b.n	8005ed4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x204>
 8005dda:	8b7b      	ldrh	r3, [r7, #26]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d16f      	bne.n	8005ec0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e06:	e05b      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d11c      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x274>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x274>
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d114      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d119      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x2b6>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d014      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e92:	f7fd febf 	bl	8003c14 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d803      	bhi.n	8005eaa <HAL_SPI_TransmitReceive+0x2ce>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d102      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x2d4>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005ebe:	e033      	b.n	8005f28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d19e      	bne.n	8005e08 <HAL_SPI_TransmitReceive+0x22c>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d199      	bne.n	8005e08 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f8b7 	bl	800604c <SPI_EndRxTxTransaction>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d006      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005ef0:	e01a      	b.n	8005f28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e003      	b.n	8005f28 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005f30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3730      	adds	r7, #48	@ 0x30
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f4c:	f7fd fe62 	bl	8003c14 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	4413      	add	r3, r2
 8005f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f5c:	f7fd fe5a 	bl	8003c14 <HAL_GetTick>
 8005f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f62:	4b39      	ldr	r3, [pc, #228]	@ (8006048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	015b      	lsls	r3, r3, #5
 8005f68:	0d1b      	lsrs	r3, r3, #20
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	fb02 f303 	mul.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f72:	e054      	b.n	800601e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d050      	beq.n	800601e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f7c:	f7fd fe4a 	bl	8003c14 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d902      	bls.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d13d      	bne.n	800600e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005faa:	d111      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb4:	d004      	beq.n	8005fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fbe:	d107      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd8:	d10f      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e017      	b.n	800603e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3b01      	subs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	429a      	cmp	r2, r3
 800603a:	d19b      	bne.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000000c 	.word	0x2000000c

0800604c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	2180      	movs	r1, #128	@ 0x80
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff ff6a 	bl	8005f3c <SPI_WaitFlagStateUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006072:	f043 0220 	orr.w	r2, r3, #32
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e000      	b.n	8006080 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e041      	b.n	800611e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fd fc94 	bl	80039dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f000 fbb0 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d001      	beq.n	8006140 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e032      	b.n	80061a6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a18      	ldr	r2, [pc, #96]	@ (80061b0 <HAL_TIM_Base_Start+0x88>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00e      	beq.n	8006170 <HAL_TIM_Base_Start+0x48>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615a:	d009      	beq.n	8006170 <HAL_TIM_Base_Start+0x48>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a14      	ldr	r2, [pc, #80]	@ (80061b4 <HAL_TIM_Base_Start+0x8c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_TIM_Base_Start+0x48>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a13      	ldr	r2, [pc, #76]	@ (80061b8 <HAL_TIM_Base_Start+0x90>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d111      	bne.n	8006194 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b06      	cmp	r3, #6
 8006180:	d010      	beq.n	80061a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	e007      	b.n	80061a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800

080061bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e041      	b.n	8006252 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f839 	bl	800625a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f000 fb16 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e041      	b.n	8006302 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f839 	bl	800630a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f000 fabe 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_TIM_PWM_Start+0x24>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e022      	b.n	8006386 <HAL_TIM_PWM_Start+0x6a>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d109      	bne.n	800635a <HAL_TIM_PWM_Start+0x3e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	e015      	b.n	8006386 <HAL_TIM_PWM_Start+0x6a>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d109      	bne.n	8006374 <HAL_TIM_PWM_Start+0x58>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	bf14      	ite	ne
 800636c:	2301      	movne	r3, #1
 800636e:	2300      	moveq	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e008      	b.n	8006386 <HAL_TIM_PWM_Start+0x6a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e05e      	b.n	800644c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <HAL_TIM_PWM_Start+0x82>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800639c:	e013      	b.n	80063c6 <HAL_TIM_PWM_Start+0xaa>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Start+0x92>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ac:	e00b      	b.n	80063c6 <HAL_TIM_PWM_Start+0xaa>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Start+0xa2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063bc:	e003      	b.n	80063c6 <HAL_TIM_PWM_Start+0xaa>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2201      	movs	r2, #1
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fcac 	bl	8006d2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006454 <HAL_TIM_PWM_Start+0x138>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d107      	bne.n	80063ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a18      	ldr	r2, [pc, #96]	@ (8006454 <HAL_TIM_PWM_Start+0x138>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00e      	beq.n	8006416 <HAL_TIM_PWM_Start+0xfa>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006400:	d009      	beq.n	8006416 <HAL_TIM_PWM_Start+0xfa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <HAL_TIM_PWM_Start+0x13c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_TIM_PWM_Start+0xfa>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a12      	ldr	r2, [pc, #72]	@ (800645c <HAL_TIM_PWM_Start+0x140>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d111      	bne.n	800643a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b06      	cmp	r3, #6
 8006426:	d010      	beq.n	800644a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	e007      	b.n	800644a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40012c00 	.word	0x40012c00
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800

08006460 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_OC_ConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e048      	b.n	8006510 <HAL_TIM_OC_ConfigChannel+0xb0>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d839      	bhi.n	8006500 <HAL_TIM_OC_ConfigChannel+0xa0>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <HAL_TIM_OC_ConfigChannel+0x34>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064c9 	.word	0x080064c9
 8006498:	08006501 	.word	0x08006501
 800649c:	08006501 	.word	0x08006501
 80064a0:	08006501 	.word	0x08006501
 80064a4:	080064d7 	.word	0x080064d7
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006501 	.word	0x08006501
 80064b0:	08006501 	.word	0x08006501
 80064b4:	080064e5 	.word	0x080064e5
 80064b8:	08006501 	.word	0x08006501
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006501 	.word	0x08006501
 80064c4:	080064f3 	.word	0x080064f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fa0e 	bl	80068f0 <TIM_OC1_SetConfig>
      break;
 80064d4:	e017      	b.n	8006506 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fa6d 	bl	80069bc <TIM_OC2_SetConfig>
      break;
 80064e2:	e010      	b.n	8006506 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fad0 	bl	8006a90 <TIM_OC3_SetConfig>
      break;
 80064f0:	e009      	b.n	8006506 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fb33 	bl	8006b64 <TIM_OC4_SetConfig>
      break;
 80064fe:	e002      	b.n	8006506 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006532:	2302      	movs	r3, #2
 8006534:	e0ae      	b.n	8006694 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b0c      	cmp	r3, #12
 8006542:	f200 809f 	bhi.w	8006684 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006546:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006581 	.word	0x08006581
 8006550:	08006685 	.word	0x08006685
 8006554:	08006685 	.word	0x08006685
 8006558:	08006685 	.word	0x08006685
 800655c:	080065c1 	.word	0x080065c1
 8006560:	08006685 	.word	0x08006685
 8006564:	08006685 	.word	0x08006685
 8006568:	08006685 	.word	0x08006685
 800656c:	08006603 	.word	0x08006603
 8006570:	08006685 	.word	0x08006685
 8006574:	08006685 	.word	0x08006685
 8006578:	08006685 	.word	0x08006685
 800657c:	08006643 	.word	0x08006643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f9b2 	bl	80068f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0208 	orr.w	r2, r2, #8
 800659a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0204 	bic.w	r2, r2, #4
 80065aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6999      	ldr	r1, [r3, #24]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	619a      	str	r2, [r3, #24]
      break;
 80065be:	e064      	b.n	800668a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f9f8 	bl	80069bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6999      	ldr	r1, [r3, #24]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	021a      	lsls	r2, r3, #8
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	619a      	str	r2, [r3, #24]
      break;
 8006600:	e043      	b.n	800668a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fa41 	bl	8006a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0208 	orr.w	r2, r2, #8
 800661c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69da      	ldr	r2, [r3, #28]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0204 	bic.w	r2, r2, #4
 800662c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69d9      	ldr	r1, [r3, #28]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	61da      	str	r2, [r3, #28]
      break;
 8006640:	e023      	b.n	800668a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fa8b 	bl	8006b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800665c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800666c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69d9      	ldr	r1, [r3, #28]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	021a      	lsls	r2, r3, #8
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	61da      	str	r2, [r3, #28]
      break;
 8006682:	e002      	b.n	800668a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	75fb      	strb	r3, [r7, #23]
      break;
 8006688:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIM_ConfigClockSource+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e0b4      	b.n	8006822 <HAL_TIM_ConfigClockSource+0x186>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f0:	d03e      	beq.n	8006770 <HAL_TIM_ConfigClockSource+0xd4>
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f6:	f200 8087 	bhi.w	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066fe:	f000 8086 	beq.w	800680e <HAL_TIM_ConfigClockSource+0x172>
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006706:	d87f      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b70      	cmp	r3, #112	@ 0x70
 800670a:	d01a      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0xa6>
 800670c:	2b70      	cmp	r3, #112	@ 0x70
 800670e:	d87b      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b60      	cmp	r3, #96	@ 0x60
 8006712:	d050      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006714:	2b60      	cmp	r3, #96	@ 0x60
 8006716:	d877      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b50      	cmp	r3, #80	@ 0x50
 800671a:	d03c      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0xfa>
 800671c:	2b50      	cmp	r3, #80	@ 0x50
 800671e:	d873      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b40      	cmp	r3, #64	@ 0x40
 8006722:	d058      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006724:	2b40      	cmp	r3, #64	@ 0x40
 8006726:	d86f      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b30      	cmp	r3, #48	@ 0x30
 800672a:	d064      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 800672c:	2b30      	cmp	r3, #48	@ 0x30
 800672e:	d86b      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b20      	cmp	r3, #32
 8006732:	d060      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006734:	2b20      	cmp	r3, #32
 8006736:	d867      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d05c      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 800673c:	2b10      	cmp	r3, #16
 800673e:	d05a      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006740:	e062      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006752:	f000 facc 	bl	8006cee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	609a      	str	r2, [r3, #8]
      break;
 800676e:	e04f      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006780:	f000 fab5 	bl	8006cee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006792:	609a      	str	r2, [r3, #8]
      break;
 8006794:	e03c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a2:	461a      	mov	r2, r3
 80067a4:	f000 fa2c 	bl	8006c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2150      	movs	r1, #80	@ 0x50
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fa83 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 80067b4:	e02c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 fa4a 	bl	8006c5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2160      	movs	r1, #96	@ 0x60
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fa73 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 80067d4:	e01c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fa0c 	bl	8006c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2140      	movs	r1, #64	@ 0x40
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fa63 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 80067f4:	e00c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f000 fa5a 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006806:	e003      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
      break;
 800680c:	e000      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800680e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a29      	ldr	r2, [pc, #164]	@ (80068e4 <TIM_Base_SetConfig+0xb8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_Base_SetConfig+0x30>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684a:	d007      	beq.n	800685c <TIM_Base_SetConfig+0x30>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a26      	ldr	r2, [pc, #152]	@ (80068e8 <TIM_Base_SetConfig+0xbc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_Base_SetConfig+0x30>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a25      	ldr	r2, [pc, #148]	@ (80068ec <TIM_Base_SetConfig+0xc0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d108      	bne.n	800686e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <TIM_Base_SetConfig+0xb8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00b      	beq.n	800688e <TIM_Base_SetConfig+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687c:	d007      	beq.n	800688e <TIM_Base_SetConfig+0x62>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a19      	ldr	r2, [pc, #100]	@ (80068e8 <TIM_Base_SetConfig+0xbc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d003      	beq.n	800688e <TIM_Base_SetConfig+0x62>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <TIM_Base_SetConfig+0xc0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d108      	bne.n	80068a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a07      	ldr	r2, [pc, #28]	@ (80068e4 <TIM_Base_SetConfig+0xb8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	615a      	str	r2, [r3, #20]
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800

080068f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f023 0201 	bic.w	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 0302 	bic.w	r3, r3, #2
 8006938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1c      	ldr	r2, [pc, #112]	@ (80069b8 <TIM_OC1_SetConfig+0xc8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d10c      	bne.n	8006966 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0308 	bic.w	r3, r3, #8
 8006952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 0304 	bic.w	r3, r3, #4
 8006964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <TIM_OC1_SetConfig+0xc8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d111      	bne.n	8006992 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00

080069bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f023 0210 	bic.w	r2, r3, #16
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0320 	bic.w	r3, r3, #32
 8006a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1d      	ldr	r2, [pc, #116]	@ (8006a8c <TIM_OC2_SetConfig+0xd0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d10d      	bne.n	8006a38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a14      	ldr	r2, [pc, #80]	@ (8006a8c <TIM_OC2_SetConfig+0xd0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d113      	bne.n	8006a68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	40012c00 	.word	0x40012c00

08006a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b60 <TIM_OC3_SetConfig+0xd0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d10d      	bne.n	8006b0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	@ (8006b60 <TIM_OC3_SetConfig+0xd0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d113      	bne.n	8006b3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	621a      	str	r2, [r3, #32]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40012c00 	.word	0x40012c00

08006b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	031b      	lsls	r3, r3, #12
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8006bfc <TIM_OC4_SetConfig+0x98>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d109      	bne.n	8006bd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	019b      	lsls	r3, r3, #6
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr
 8006bfc:	40012c00 	.word	0x40012c00

08006c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 030a 	bic.w	r3, r3, #10
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0210 	bic.w	r2, r3, #16
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	031b      	lsls	r3, r3, #12
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	621a      	str	r2, [r3, #32]
}
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr

08006cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f043 0307 	orr.w	r3, r3, #7
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr

08006cee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b087      	sub	sp, #28
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	021a      	lsls	r2, r3, #8
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	431a      	orrs	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	609a      	str	r2, [r3, #8]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr

08006d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	2201      	movs	r2, #1
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1a      	ldr	r2, [r3, #32]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	401a      	ands	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a1a      	ldr	r2, [r3, #32]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	fa01 f303 	lsl.w	r3, r1, r3
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e046      	b.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a16      	ldr	r2, [pc, #88]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a12      	ldr	r2, [pc, #72]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a10      	ldr	r2, [pc, #64]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800

08006e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e03d      	b.n	8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <memset>:
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d100      	bne.n	8006edc <memset+0xa>
 8006eda:	4770      	bx	lr
 8006edc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee0:	e7f9      	b.n	8006ed6 <memset+0x4>
	...

08006ee4 <__errno>:
 8006ee4:	4b01      	ldr	r3, [pc, #4]	@ (8006eec <__errno+0x8>)
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000018 	.word	0x20000018

08006ef0 <__libc_init_array>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	4d0c      	ldr	r5, [pc, #48]	@ (8006f28 <__libc_init_array+0x38>)
 8006ef6:	4c0d      	ldr	r4, [pc, #52]	@ (8006f2c <__libc_init_array+0x3c>)
 8006ef8:	1b64      	subs	r4, r4, r5
 8006efa:	10a4      	asrs	r4, r4, #2
 8006efc:	42a6      	cmp	r6, r4
 8006efe:	d109      	bne.n	8006f14 <__libc_init_array+0x24>
 8006f00:	f000 faa8 	bl	8007454 <_init>
 8006f04:	2600      	movs	r6, #0
 8006f06:	4d0a      	ldr	r5, [pc, #40]	@ (8006f30 <__libc_init_array+0x40>)
 8006f08:	4c0a      	ldr	r4, [pc, #40]	@ (8006f34 <__libc_init_array+0x44>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	42a6      	cmp	r6, r4
 8006f10:	d105      	bne.n	8006f1e <__libc_init_array+0x2e>
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f18:	4798      	blx	r3
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7ee      	b.n	8006efc <__libc_init_array+0xc>
 8006f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f22:	4798      	blx	r3
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7f2      	b.n	8006f0e <__libc_init_array+0x1e>
 8006f28:	080074f0 	.word	0x080074f0
 8006f2c:	080074f0 	.word	0x080074f0
 8006f30:	080074f0 	.word	0x080074f0
 8006f34:	080074f4 	.word	0x080074f4

08006f38 <sqrt>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	f000 f9b3 	bl	80072a8 <__ieee754_sqrt>
 8006f42:	4632      	mov	r2, r6
 8006f44:	4604      	mov	r4, r0
 8006f46:	460d      	mov	r5, r1
 8006f48:	463b      	mov	r3, r7
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	f7f9 fd55 	bl	80009fc <__aeabi_dcmpun>
 8006f52:	b990      	cbnz	r0, 8006f7a <sqrt+0x42>
 8006f54:	2200      	movs	r2, #0
 8006f56:	2300      	movs	r3, #0
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fd26 	bl	80009ac <__aeabi_dcmplt>
 8006f60:	b158      	cbz	r0, 8006f7a <sqrt+0x42>
 8006f62:	f7ff ffbf 	bl	8006ee4 <__errno>
 8006f66:	2321      	movs	r3, #33	@ 0x21
 8006f68:	2200      	movs	r2, #0
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	f7f9 fbd3 	bl	800071c <__aeabi_ddiv>
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f80 <atan>:
 8006f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	4bbc      	ldr	r3, [pc, #752]	@ (8007278 <atan+0x2f8>)
 8006f86:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8006f8a:	429e      	cmp	r6, r3
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	468b      	mov	fp, r1
 8006f92:	d918      	bls.n	8006fc6 <atan+0x46>
 8006f94:	4bb9      	ldr	r3, [pc, #740]	@ (800727c <atan+0x2fc>)
 8006f96:	429e      	cmp	r6, r3
 8006f98:	d801      	bhi.n	8006f9e <atan+0x1e>
 8006f9a:	d109      	bne.n	8006fb0 <atan+0x30>
 8006f9c:	b140      	cbz	r0, 8006fb0 <atan+0x30>
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	f7f9 f8d9 	bl	800015c <__adddf3>
 8006faa:	4604      	mov	r4, r0
 8006fac:	460d      	mov	r5, r1
 8006fae:	e006      	b.n	8006fbe <atan+0x3e>
 8006fb0:	f1bb 0f00 	cmp.w	fp, #0
 8006fb4:	f340 8123 	ble.w	80071fe <atan+0x27e>
 8006fb8:	a593      	add	r5, pc, #588	@ (adr r5, 8007208 <atan+0x288>)
 8006fba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	4bae      	ldr	r3, [pc, #696]	@ (8007280 <atan+0x300>)
 8006fc8:	429e      	cmp	r6, r3
 8006fca:	d811      	bhi.n	8006ff0 <atan+0x70>
 8006fcc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006fd0:	429e      	cmp	r6, r3
 8006fd2:	d80a      	bhi.n	8006fea <atan+0x6a>
 8006fd4:	a38e      	add	r3, pc, #568	@ (adr r3, 8007210 <atan+0x290>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f8bf 	bl	800015c <__adddf3>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4ba8      	ldr	r3, [pc, #672]	@ (8007284 <atan+0x304>)
 8006fe2:	f7f9 fd01 	bl	80009e8 <__aeabi_dcmpgt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d1e9      	bne.n	8006fbe <atan+0x3e>
 8006fea:	f04f 3aff 	mov.w	sl, #4294967295
 8006fee:	e027      	b.n	8007040 <atan+0xc0>
 8006ff0:	f000 f956 	bl	80072a0 <fabs>
 8006ff4:	4ba4      	ldr	r3, [pc, #656]	@ (8007288 <atan+0x308>)
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	429e      	cmp	r6, r3
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	f200 80b8 	bhi.w	8007170 <atan+0x1f0>
 8007000:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007004:	429e      	cmp	r6, r3
 8007006:	f200 809c 	bhi.w	8007142 <atan+0x1c2>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	f7f9 f8a5 	bl	800015c <__adddf3>
 8007012:	2200      	movs	r2, #0
 8007014:	4b9b      	ldr	r3, [pc, #620]	@ (8007284 <atan+0x304>)
 8007016:	f7f9 f89f 	bl	8000158 <__aeabi_dsub>
 800701a:	2200      	movs	r2, #0
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	f7f9 f898 	bl	800015c <__adddf3>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4630      	mov	r0, r6
 8007032:	4639      	mov	r1, r7
 8007034:	f7f9 fb72 	bl	800071c <__aeabi_ddiv>
 8007038:	f04f 0a00 	mov.w	sl, #0
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 fa3e 	bl	80004c8 <__aeabi_dmul>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4680      	mov	r8, r0
 8007052:	4689      	mov	r9, r1
 8007054:	f7f9 fa38 	bl	80004c8 <__aeabi_dmul>
 8007058:	a36f      	add	r3, pc, #444	@ (adr r3, 8007218 <atan+0x298>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	f7f9 fa31 	bl	80004c8 <__aeabi_dmul>
 8007066:	a36e      	add	r3, pc, #440	@ (adr r3, 8007220 <atan+0x2a0>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f7f9 f876 	bl	800015c <__adddf3>
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	f7f9 fa28 	bl	80004c8 <__aeabi_dmul>
 8007078:	a36b      	add	r3, pc, #428	@ (adr r3, 8007228 <atan+0x2a8>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 f86d 	bl	800015c <__adddf3>
 8007082:	4632      	mov	r2, r6
 8007084:	463b      	mov	r3, r7
 8007086:	f7f9 fa1f 	bl	80004c8 <__aeabi_dmul>
 800708a:	a369      	add	r3, pc, #420	@ (adr r3, 8007230 <atan+0x2b0>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f7f9 f864 	bl	800015c <__adddf3>
 8007094:	4632      	mov	r2, r6
 8007096:	463b      	mov	r3, r7
 8007098:	f7f9 fa16 	bl	80004c8 <__aeabi_dmul>
 800709c:	a366      	add	r3, pc, #408	@ (adr r3, 8007238 <atan+0x2b8>)
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 f85b 	bl	800015c <__adddf3>
 80070a6:	4632      	mov	r2, r6
 80070a8:	463b      	mov	r3, r7
 80070aa:	f7f9 fa0d 	bl	80004c8 <__aeabi_dmul>
 80070ae:	a364      	add	r3, pc, #400	@ (adr r3, 8007240 <atan+0x2c0>)
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	f7f9 f852 	bl	800015c <__adddf3>
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	f7f9 fa04 	bl	80004c8 <__aeabi_dmul>
 80070c0:	a361      	add	r3, pc, #388	@ (adr r3, 8007248 <atan+0x2c8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	4680      	mov	r8, r0
 80070c8:	4689      	mov	r9, r1
 80070ca:	4630      	mov	r0, r6
 80070cc:	4639      	mov	r1, r7
 80070ce:	f7f9 f9fb 	bl	80004c8 <__aeabi_dmul>
 80070d2:	a35f      	add	r3, pc, #380	@ (adr r3, 8007250 <atan+0x2d0>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f7f9 f83e 	bl	8000158 <__aeabi_dsub>
 80070dc:	4632      	mov	r2, r6
 80070de:	463b      	mov	r3, r7
 80070e0:	f7f9 f9f2 	bl	80004c8 <__aeabi_dmul>
 80070e4:	a35c      	add	r3, pc, #368	@ (adr r3, 8007258 <atan+0x2d8>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 f835 	bl	8000158 <__aeabi_dsub>
 80070ee:	4632      	mov	r2, r6
 80070f0:	463b      	mov	r3, r7
 80070f2:	f7f9 f9e9 	bl	80004c8 <__aeabi_dmul>
 80070f6:	a35a      	add	r3, pc, #360	@ (adr r3, 8007260 <atan+0x2e0>)
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f7f9 f82c 	bl	8000158 <__aeabi_dsub>
 8007100:	4632      	mov	r2, r6
 8007102:	463b      	mov	r3, r7
 8007104:	f7f9 f9e0 	bl	80004c8 <__aeabi_dmul>
 8007108:	a357      	add	r3, pc, #348	@ (adr r3, 8007268 <atan+0x2e8>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f823 	bl	8000158 <__aeabi_dsub>
 8007112:	4632      	mov	r2, r6
 8007114:	463b      	mov	r3, r7
 8007116:	f7f9 f9d7 	bl	80004c8 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 f81b 	bl	800015c <__adddf3>
 8007126:	4622      	mov	r2, r4
 8007128:	462b      	mov	r3, r5
 800712a:	f7f9 f9cd 	bl	80004c8 <__aeabi_dmul>
 800712e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	d144      	bne.n	80071c2 <atan+0x242>
 8007138:	4620      	mov	r0, r4
 800713a:	4629      	mov	r1, r5
 800713c:	f7f9 f80c 	bl	8000158 <__aeabi_dsub>
 8007140:	e733      	b.n	8006faa <atan+0x2a>
 8007142:	2200      	movs	r2, #0
 8007144:	4b4f      	ldr	r3, [pc, #316]	@ (8007284 <atan+0x304>)
 8007146:	f7f9 f807 	bl	8000158 <__aeabi_dsub>
 800714a:	2200      	movs	r2, #0
 800714c:	4606      	mov	r6, r0
 800714e:	460f      	mov	r7, r1
 8007150:	4620      	mov	r0, r4
 8007152:	4629      	mov	r1, r5
 8007154:	4b4b      	ldr	r3, [pc, #300]	@ (8007284 <atan+0x304>)
 8007156:	f7f9 f801 	bl	800015c <__adddf3>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fadb 	bl	800071c <__aeabi_ddiv>
 8007166:	f04f 0a01 	mov.w	sl, #1
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	e767      	b.n	8007040 <atan+0xc0>
 8007170:	4b46      	ldr	r3, [pc, #280]	@ (800728c <atan+0x30c>)
 8007172:	429e      	cmp	r6, r3
 8007174:	d21a      	bcs.n	80071ac <atan+0x22c>
 8007176:	2200      	movs	r2, #0
 8007178:	4b45      	ldr	r3, [pc, #276]	@ (8007290 <atan+0x310>)
 800717a:	f7f8 ffed 	bl	8000158 <__aeabi_dsub>
 800717e:	2200      	movs	r2, #0
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	4b41      	ldr	r3, [pc, #260]	@ (8007290 <atan+0x310>)
 800718a:	f7f9 f99d 	bl	80004c8 <__aeabi_dmul>
 800718e:	2200      	movs	r2, #0
 8007190:	4b3c      	ldr	r3, [pc, #240]	@ (8007284 <atan+0x304>)
 8007192:	f7f8 ffe3 	bl	800015c <__adddf3>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 fabd 	bl	800071c <__aeabi_ddiv>
 80071a2:	f04f 0a02 	mov.w	sl, #2
 80071a6:	4604      	mov	r4, r0
 80071a8:	460d      	mov	r5, r1
 80071aa:	e749      	b.n	8007040 <atan+0xc0>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	2000      	movs	r0, #0
 80071b2:	4938      	ldr	r1, [pc, #224]	@ (8007294 <atan+0x314>)
 80071b4:	f7f9 fab2 	bl	800071c <__aeabi_ddiv>
 80071b8:	f04f 0a03 	mov.w	sl, #3
 80071bc:	4604      	mov	r4, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	e73e      	b.n	8007040 <atan+0xc0>
 80071c2:	4b35      	ldr	r3, [pc, #212]	@ (8007298 <atan+0x318>)
 80071c4:	4e35      	ldr	r6, [pc, #212]	@ (800729c <atan+0x31c>)
 80071c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f8 ffc3 	bl	8000158 <__aeabi_dsub>
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	f7f8 ffbf 	bl	8000158 <__aeabi_dsub>
 80071da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80071e6:	f7f8 ffb7 	bl	8000158 <__aeabi_dsub>
 80071ea:	f1bb 0f00 	cmp.w	fp, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	460d      	mov	r5, r1
 80071f2:	f6bf aee4 	bge.w	8006fbe <atan+0x3e>
 80071f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071fa:	461d      	mov	r5, r3
 80071fc:	e6df      	b.n	8006fbe <atan+0x3e>
 80071fe:	a51c      	add	r5, pc, #112	@ (adr r5, 8007270 <atan+0x2f0>)
 8007200:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007204:	e6db      	b.n	8006fbe <atan+0x3e>
 8007206:	bf00      	nop
 8007208:	54442d18 	.word	0x54442d18
 800720c:	3ff921fb 	.word	0x3ff921fb
 8007210:	8800759c 	.word	0x8800759c
 8007214:	7e37e43c 	.word	0x7e37e43c
 8007218:	e322da11 	.word	0xe322da11
 800721c:	3f90ad3a 	.word	0x3f90ad3a
 8007220:	24760deb 	.word	0x24760deb
 8007224:	3fa97b4b 	.word	0x3fa97b4b
 8007228:	a0d03d51 	.word	0xa0d03d51
 800722c:	3fb10d66 	.word	0x3fb10d66
 8007230:	c54c206e 	.word	0xc54c206e
 8007234:	3fb745cd 	.word	0x3fb745cd
 8007238:	920083ff 	.word	0x920083ff
 800723c:	3fc24924 	.word	0x3fc24924
 8007240:	5555550d 	.word	0x5555550d
 8007244:	3fd55555 	.word	0x3fd55555
 8007248:	2c6a6c2f 	.word	0x2c6a6c2f
 800724c:	bfa2b444 	.word	0xbfa2b444
 8007250:	52defd9a 	.word	0x52defd9a
 8007254:	3fadde2d 	.word	0x3fadde2d
 8007258:	af749a6d 	.word	0xaf749a6d
 800725c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007260:	fe231671 	.word	0xfe231671
 8007264:	3fbc71c6 	.word	0x3fbc71c6
 8007268:	9998ebc4 	.word	0x9998ebc4
 800726c:	3fc99999 	.word	0x3fc99999
 8007270:	54442d18 	.word	0x54442d18
 8007274:	bff921fb 	.word	0xbff921fb
 8007278:	440fffff 	.word	0x440fffff
 800727c:	7ff00000 	.word	0x7ff00000
 8007280:	3fdbffff 	.word	0x3fdbffff
 8007284:	3ff00000 	.word	0x3ff00000
 8007288:	3ff2ffff 	.word	0x3ff2ffff
 800728c:	40038000 	.word	0x40038000
 8007290:	3ff80000 	.word	0x3ff80000
 8007294:	bff00000 	.word	0xbff00000
 8007298:	080074b0 	.word	0x080074b0
 800729c:	080074d0 	.word	0x080074d0

080072a0 <fabs>:
 80072a0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80072a4:	4619      	mov	r1, r3
 80072a6:	4770      	bx	lr

080072a8 <__ieee754_sqrt>:
 80072a8:	4a67      	ldr	r2, [pc, #412]	@ (8007448 <__ieee754_sqrt+0x1a0>)
 80072aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ae:	438a      	bics	r2, r1
 80072b0:	4606      	mov	r6, r0
 80072b2:	460f      	mov	r7, r1
 80072b4:	460b      	mov	r3, r1
 80072b6:	4604      	mov	r4, r0
 80072b8:	d10e      	bne.n	80072d8 <__ieee754_sqrt+0x30>
 80072ba:	4602      	mov	r2, r0
 80072bc:	f7f9 f904 	bl	80004c8 <__aeabi_dmul>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f8 ff48 	bl	800015c <__adddf3>
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d8:	2900      	cmp	r1, #0
 80072da:	dc0c      	bgt.n	80072f6 <__ieee754_sqrt+0x4e>
 80072dc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80072e0:	4302      	orrs	r2, r0
 80072e2:	d0f5      	beq.n	80072d0 <__ieee754_sqrt+0x28>
 80072e4:	b189      	cbz	r1, 800730a <__ieee754_sqrt+0x62>
 80072e6:	4602      	mov	r2, r0
 80072e8:	f7f8 ff36 	bl	8000158 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	f7f9 fa14 	bl	800071c <__aeabi_ddiv>
 80072f4:	e7ea      	b.n	80072cc <__ieee754_sqrt+0x24>
 80072f6:	150a      	asrs	r2, r1, #20
 80072f8:	d115      	bne.n	8007326 <__ieee754_sqrt+0x7e>
 80072fa:	2100      	movs	r1, #0
 80072fc:	e009      	b.n	8007312 <__ieee754_sqrt+0x6a>
 80072fe:	0ae3      	lsrs	r3, r4, #11
 8007300:	3a15      	subs	r2, #21
 8007302:	0564      	lsls	r4, r4, #21
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0fa      	beq.n	80072fe <__ieee754_sqrt+0x56>
 8007308:	e7f7      	b.n	80072fa <__ieee754_sqrt+0x52>
 800730a:	460a      	mov	r2, r1
 800730c:	e7fa      	b.n	8007304 <__ieee754_sqrt+0x5c>
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	3101      	adds	r1, #1
 8007312:	02d8      	lsls	r0, r3, #11
 8007314:	d5fb      	bpl.n	800730e <__ieee754_sqrt+0x66>
 8007316:	1e48      	subs	r0, r1, #1
 8007318:	1a12      	subs	r2, r2, r0
 800731a:	f1c1 0020 	rsb	r0, r1, #32
 800731e:	fa24 f000 	lsr.w	r0, r4, r0
 8007322:	4303      	orrs	r3, r0
 8007324:	408c      	lsls	r4, r1
 8007326:	2600      	movs	r6, #0
 8007328:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800732c:	2116      	movs	r1, #22
 800732e:	07d2      	lsls	r2, r2, #31
 8007330:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007334:	4632      	mov	r2, r6
 8007336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800733a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800733e:	bf5c      	itt	pl
 8007340:	005b      	lslpl	r3, r3, #1
 8007342:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007346:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800734a:	bf58      	it	pl
 800734c:	0064      	lslpl	r4, r4, #1
 800734e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007352:	107f      	asrs	r7, r7, #1
 8007354:	0064      	lsls	r4, r4, #1
 8007356:	1815      	adds	r5, r2, r0
 8007358:	429d      	cmp	r5, r3
 800735a:	bfde      	ittt	le
 800735c:	182a      	addle	r2, r5, r0
 800735e:	1b5b      	suble	r3, r3, r5
 8007360:	1836      	addle	r6, r6, r0
 8007362:	0fe5      	lsrs	r5, r4, #31
 8007364:	3901      	subs	r1, #1
 8007366:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800736a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800736e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007372:	d1f0      	bne.n	8007356 <__ieee754_sqrt+0xae>
 8007374:	460d      	mov	r5, r1
 8007376:	f04f 0a20 	mov.w	sl, #32
 800737a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800737e:	429a      	cmp	r2, r3
 8007380:	eb01 0c00 	add.w	ip, r1, r0
 8007384:	db02      	blt.n	800738c <__ieee754_sqrt+0xe4>
 8007386:	d113      	bne.n	80073b0 <__ieee754_sqrt+0x108>
 8007388:	45a4      	cmp	ip, r4
 800738a:	d811      	bhi.n	80073b0 <__ieee754_sqrt+0x108>
 800738c:	f1bc 0f00 	cmp.w	ip, #0
 8007390:	eb0c 0100 	add.w	r1, ip, r0
 8007394:	da42      	bge.n	800741c <__ieee754_sqrt+0x174>
 8007396:	2900      	cmp	r1, #0
 8007398:	db40      	blt.n	800741c <__ieee754_sqrt+0x174>
 800739a:	f102 0e01 	add.w	lr, r2, #1
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	4672      	mov	r2, lr
 80073a2:	45a4      	cmp	ip, r4
 80073a4:	bf88      	it	hi
 80073a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80073aa:	eba4 040c 	sub.w	r4, r4, ip
 80073ae:	4405      	add	r5, r0
 80073b0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80073b4:	f1ba 0a01 	subs.w	sl, sl, #1
 80073b8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80073bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80073c0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80073c4:	d1db      	bne.n	800737e <__ieee754_sqrt+0xd6>
 80073c6:	431c      	orrs	r4, r3
 80073c8:	d01a      	beq.n	8007400 <__ieee754_sqrt+0x158>
 80073ca:	4c20      	ldr	r4, [pc, #128]	@ (800744c <__ieee754_sqrt+0x1a4>)
 80073cc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007450 <__ieee754_sqrt+0x1a8>
 80073d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80073d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80073d8:	f7f8 febe 	bl	8000158 <__aeabi_dsub>
 80073dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4640      	mov	r0, r8
 80073e6:	4649      	mov	r1, r9
 80073e8:	f7f9 faea 	bl	80009c0 <__aeabi_dcmple>
 80073ec:	b140      	cbz	r0, 8007400 <__ieee754_sqrt+0x158>
 80073ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 80073f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80073f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80073fa:	d111      	bne.n	8007420 <__ieee754_sqrt+0x178>
 80073fc:	4655      	mov	r5, sl
 80073fe:	3601      	adds	r6, #1
 8007400:	1072      	asrs	r2, r6, #1
 8007402:	086b      	lsrs	r3, r5, #1
 8007404:	07f1      	lsls	r1, r6, #31
 8007406:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800740a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800740e:	bf48      	it	mi
 8007410:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007414:	4618      	mov	r0, r3
 8007416:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800741a:	e757      	b.n	80072cc <__ieee754_sqrt+0x24>
 800741c:	4696      	mov	lr, r2
 800741e:	e7be      	b.n	800739e <__ieee754_sqrt+0xf6>
 8007420:	f7f8 fe9c 	bl	800015c <__adddf3>
 8007424:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 fabc 	bl	80009ac <__aeabi_dcmplt>
 8007434:	b120      	cbz	r0, 8007440 <__ieee754_sqrt+0x198>
 8007436:	1ca8      	adds	r0, r5, #2
 8007438:	bf08      	it	eq
 800743a:	3601      	addeq	r6, #1
 800743c:	3502      	adds	r5, #2
 800743e:	e7df      	b.n	8007400 <__ieee754_sqrt+0x158>
 8007440:	1c6b      	adds	r3, r5, #1
 8007442:	f023 0501 	bic.w	r5, r3, #1
 8007446:	e7db      	b.n	8007400 <__ieee754_sqrt+0x158>
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	20000070 	.word	0x20000070
 8007450:	20000068 	.word	0x20000068

08007454 <_init>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	bf00      	nop
 8007458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745a:	bc08      	pop	{r3}
 800745c:	469e      	mov	lr, r3
 800745e:	4770      	bx	lr

08007460 <_fini>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr
